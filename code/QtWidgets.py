"""
This page contains the API documentation of a compact version of the **PySide6.QtWidgets** module. 
"""

# Module `PySide6.QtWidgets`

import PySide6.QtWidgets
import PySide6.QtCore
import PySide6.QtGui

import enum
from typing import (
    Any,
    ClassVar,
    Dict,
    Iterable,
    List,
    Optional,
    Sequence,
    Text,
    Tuple,
    Type,
    Union,
    overload,
)
from PySide6.QtCore import Signal, SignalInstance
from shiboken6 import Shiboken

NoneType = type(None)


class QWidget:
    """
    <hr>

    The `QWidget` class is the base class of all user interface objects in PySide6.QtWidgets.

    <hr>

    <h3>Methods</h3>

    <ul>
        <li><a href="#code.QtWidgets.QWidget.resize"><code>resize</code></a></li>
        <li><a href="#code.QtWidgets.QWidget.show"><code>show</code></a></li>
    </ul>

    <br>

    **Examples**
    <hr>
    ``` py
    widget = QWidget()
    widget.resize(250, 150)

    # QPushButton is a subclass of QWidget
    button = QPushButton("press me")
    button.resize(100, 50)
    ```
    In the above code we show that we can apply the <a href="#code.QtWidgets.QWidget.resize"><code>resize</code></a> method to all widgets that inherit from `QWidget` such as <a href="../QPushButton"><code>QPushButton</code></a>.
    Another example with <a href="../QPushButton"><code>QMainWindow</code></a> is shown below:

    ``` py
    # QApplication is required to run the application
    app = QApplication()

    # QMainWindow is a subclass of QWidget
    window = QMainWindow()
    window.resize(500, 300)

    # Displays an empty window with a size of 500x300 pixels
    window.show()
    app.exec()
    ```

    <hr>
    <br>
    """

    #     customContextMenuRequested: ClassVar[Signal] = ... # customContextMenuRequested(QPoint)
    #     windowIconChanged        : ClassVar[Signal] = ... # windowIconChanged(QIcon)
    #     windowIconTextChanged    : ClassVar[Signal] = ... # windowIconTextChanged(QString)
    #     windowTitleChanged       : ClassVar[Signal] = ... # windowTitleChanged(QString)

    #     class RenderFlag(enum.Flag):

    #         DrawWindowBackground     : QWidget.RenderFlag = ... # 0x1
    #         DrawChildren             : QWidget.RenderFlag = ... # 0x2
    #         IgnoreMask               : QWidget.RenderFlag = ... # 0x4

    #     def __init__(self, parent: Optional[PySide6.QtWidgets.QWidget] = ..., f: PySide6.QtCore.Qt.WindowType = ...) -> None: ...

    #     def acceptDrops(self) -> bool: ...
    #     def accessibleDescription(self) -> str: ...
    #     def accessibleName(self) -> str: ...
    #     def actionEvent(self, event: PySide6.QtGui.QActionEvent) -> None: ...
    #     def actions(self) -> List[PySide6.QtGui.QAction]: ...
    #     def activateWindow(self) -> None: ...
    #     @overload
    #     def addAction(self, action: PySide6.QtGui.QAction) -> None: ...
    #     @overload
    #     def addAction(self, icon: Union[PySide6.QtGui.QIcon, PySide6.QtGui.QPixmap], text: str) -> PySide6.QtGui.QAction: ...
    #     @overload
    #     def addAction(self, icon: Union[PySide6.QtGui.QIcon, PySide6.QtGui.QPixmap], text: str, callable: object) -> PySide6.QtGui.QAction: ...
    #     @overload
    #     def addAction(self, icon: Union[PySide6.QtGui.QIcon, PySide6.QtGui.QPixmap], text: str, receiver: PySide6.QtCore.QObject, member: bytes, type: PySide6.QtCore.Qt.ConnectionType = ...) -> PySide6.QtGui.QAction: ...
    #     @overload
    #     def addAction(self, icon: Union[PySide6.QtGui.QIcon, PySide6.QtGui.QPixmap], text: str, shortcut: Union[PySide6.QtGui.QKeySequence, PySide6.QtCore.QKeyCombination, PySide6.QtGui.QKeySequence.StandardKey, str, int]) -> PySide6.QtGui.QAction: ...
    #     @overload
    #     def addAction(self, icon: Union[PySide6.QtGui.QIcon, PySide6.QtGui.QPixmap], text: str, shortcut: Union[PySide6.QtGui.QKeySequence, PySide6.QtCore.QKeyCombination, PySide6.QtGui.QKeySequence.StandardKey, str, int], callable: object) -> PySide6.QtGui.QAction: ...
    #     @overload
    #     def addAction(self, icon: Union[PySide6.QtGui.QIcon, PySide6.QtGui.QPixmap], text: str, shortcut: Union[PySide6.QtGui.QKeySequence, PySide6.QtCore.QKeyCombination, PySide6.QtGui.QKeySequence.StandardKey, str, int], receiver: PySide6.QtCore.QObject, member: bytes, type: PySide6.QtCore.Qt.ConnectionType = ...) -> PySide6.QtGui.QAction: ...
    #     @overload
    #     def addAction(self, text: str) -> PySide6.QtGui.QAction: ...
    #     @overload
    #     def addAction(self, text: str, callable: object) -> PySide6.QtGui.QAction: ...
    #     @overload
    #     def addAction(self, text: str, receiver: PySide6.QtCore.QObject, member: bytes, type: PySide6.QtCore.Qt.ConnectionType = ...) -> PySide6.QtGui.QAction: ...
    #     @overload
    #     def addAction(self, text: str, shortcut: Union[PySide6.QtGui.QKeySequence, PySide6.QtCore.QKeyCombination, PySide6.QtGui.QKeySequence.StandardKey, str, int]) -> PySide6.QtGui.QAction: ...
    #     @overload
    #     def addAction(self, text: str, shortcut: Union[PySide6.QtGui.QKeySequence, PySide6.QtCore.QKeyCombination, PySide6.QtGui.QKeySequence.StandardKey, str, int], callable: object) -> PySide6.QtGui.QAction: ...
    #     @overload
    #     def addAction(self, text: str, shortcut: Union[PySide6.QtGui.QKeySequence, PySide6.QtCore.QKeyCombination, PySide6.QtGui.QKeySequence.StandardKey, str, int], receiver: PySide6.QtCore.QObject, member: bytes, type: PySide6.QtCore.Qt.ConnectionType = ...) -> PySide6.QtGui.QAction: ...
    #     def addActions(self, actions: Sequence[PySide6.QtGui.QAction]) -> None: ...
    #     def adjustSize(self) -> None: ...
    #     def autoFillBackground(self) -> bool: ...
    #     def backgroundRole(self) -> PySide6.QtGui.QPalette.ColorRole: ...
    #     def backingStore(self) -> PySide6.QtGui.QBackingStore: ...
    #     def baseSize(self) -> PySide6.QtCore.QSize: ...
    #     def changeEvent(self, event: PySide6.QtCore.QEvent) -> None: ...
    #     @overload
    #     def childAt(self, p: PySide6.QtCore.QPoint) -> PySide6.QtWidgets.QWidget: ...
    #     @overload
    #     def childAt(self, x: int, y: int) -> PySide6.QtWidgets.QWidget: ...
    #     def childrenRect(self) -> PySide6.QtCore.QRect: ...
    #     def childrenRegion(self) -> PySide6.QtGui.QRegion: ...
    #     def clearFocus(self) -> None: ...
    #     def clearMask(self) -> None: ...
    #     def close(self) -> bool: ...
    #     def closeEvent(self, event: PySide6.QtGui.QCloseEvent) -> None: ...
    #     def contentsMargins(self) -> PySide6.QtCore.QMargins: ...
    #     def contentsRect(self) -> PySide6.QtCore.QRect: ...
    #     def contextMenuEvent(self, event: PySide6.QtGui.QContextMenuEvent) -> None: ...
    #     def contextMenuPolicy(self) -> PySide6.QtCore.Qt.ContextMenuPolicy: ...
    #     def create(self, arg__1: int = ..., initializeWindow: bool = ..., destroyOldWindow: bool = ...) -> None: ...
    #     def createWinId(self) -> None: ...
    #     @staticmethod
    #     def createWindowContainer(window: PySide6.QtGui.QWindow, parent: Optional[PySide6.QtWidgets.QWidget] = ..., flags: PySide6.QtCore.Qt.WindowType = ...) -> PySide6.QtWidgets.QWidget: ...
    #     def cursor(self) -> PySide6.QtGui.QCursor: ...
    #     def destroy(self, destroyWindow: bool = ..., destroySubWindows: bool = ...) -> None: ...
    #     def devType(self) -> int: ...
    #     def dragEnterEvent(self, event: PySide6.QtGui.QDragEnterEvent) -> None: ...
    #     def dragLeaveEvent(self, event: PySide6.QtGui.QDragLeaveEvent) -> None: ...
    #     def dragMoveEvent(self, event: PySide6.QtGui.QDragMoveEvent) -> None: ...
    #     def dropEvent(self, event: PySide6.QtGui.QDropEvent) -> None: ...
    #     def effectiveWinId(self) -> int: ...
    #     def ensurePolished(self) -> None: ...
    #     def enterEvent(self, event: PySide6.QtGui.QEnterEvent) -> None: ...
    #     def event(self, event: PySide6.QtCore.QEvent) -> bool: ...
    #     @staticmethod
    #     def find(arg__1: int) -> PySide6.QtWidgets.QWidget: ...
    #     def focusInEvent(self, event: PySide6.QtGui.QFocusEvent) -> None: ...
    #     def focusNextChild(self) -> bool: ...
    #     def focusNextPrevChild(self, next: bool) -> bool: ...
    #     def focusOutEvent(self, event: PySide6.QtGui.QFocusEvent) -> None: ...
    #     def focusPolicy(self) -> PySide6.QtCore.Qt.FocusPolicy: ...
    #     def focusPreviousChild(self) -> bool: ...
    #     def focusProxy(self) -> PySide6.QtWidgets.QWidget: ...
    #     def focusWidget(self) -> PySide6.QtWidgets.QWidget: ...
    #     def font(self) -> PySide6.QtGui.QFont: ...
    #     def fontInfo(self) -> PySide6.QtGui.QFontInfo: ...
    #     def fontMetrics(self) -> PySide6.QtGui.QFontMetrics: ...
    #     def foregroundRole(self) -> PySide6.QtGui.QPalette.ColorRole: ...
    #     def frameGeometry(self) -> PySide6.QtCore.QRect: ...
    #     def frameSize(self) -> PySide6.QtCore.QSize: ...
    #     def geometry(self) -> PySide6.QtCore.QRect: ...
    #     def grab(self, rectangle: PySide6.QtCore.QRect = ...) -> PySide6.QtGui.QPixmap: ...
    #     def grabGesture(self, type: PySide6.QtCore.Qt.GestureType, flags: PySide6.QtCore.Qt.GestureFlag = ...) -> None: ...
    #     def grabKeyboard(self) -> None: ...
    #     @overload
    #     def grabMouse(self) -> None: ...
    #     @overload
    #     def grabMouse(self, arg__1: Union[PySide6.QtGui.QCursor, PySide6.QtCore.Qt.CursorShape, PySide6.QtGui.QPixmap]) -> None: ...
    #     def grabShortcut(self, key: Union[PySide6.QtGui.QKeySequence, PySide6.QtCore.QKeyCombination, PySide6.QtGui.QKeySequence.StandardKey, str, int], context: PySide6.QtCore.Qt.ShortcutContext = ...) -> int: ...
    #     def graphicsEffect(self) -> PySide6.QtWidgets.QGraphicsEffect: ...
    #     def graphicsProxyWidget(self) -> PySide6.QtWidgets.QGraphicsProxyWidget: ...
    #     def hasFocus(self) -> bool: ...
    #     def hasHeightForWidth(self) -> bool: ...
    #     def hasMouseTracking(self) -> bool: ...
    #     def hasTabletTracking(self) -> bool: ...
    #     def height(self) -> int: ...
    #     def heightForWidth(self, arg__1: int) -> int: ...
    #     def hide(self) -> None: ...
    #     def hideEvent(self, event: PySide6.QtGui.QHideEvent) -> None: ...
    #     def initPainter(self, painter: PySide6.QtGui.QPainter) -> None: ...
    #     def inputMethodEvent(self, event: PySide6.QtGui.QInputMethodEvent) -> None: ...
    #     def inputMethodHints(self) -> PySide6.QtCore.Qt.InputMethodHint: ...
    #     def inputMethodQuery(self, arg__1: PySide6.QtCore.Qt.InputMethodQuery) -> Any: ...
    #     def insertAction(self, before: PySide6.QtGui.QAction, action: PySide6.QtGui.QAction) -> None: ...
    #     def insertActions(self, before: PySide6.QtGui.QAction, actions: Sequence[PySide6.QtGui.QAction]) -> None: ...
    #     def internalWinId(self) -> int: ...
    #     def isActiveWindow(self) -> bool: ...
    #     def isAncestorOf(self, child: PySide6.QtWidgets.QWidget) -> bool: ...
    #     def isEnabled(self) -> bool: ...
    #     def isEnabledTo(self, arg__1: PySide6.QtWidgets.QWidget) -> bool: ...
    #     def isFullScreen(self) -> bool: ...
    #     def isHidden(self) -> bool: ...
    #     def isLeftToRight(self) -> bool: ...
    #     def isMaximized(self) -> bool: ...
    #     def isMinimized(self) -> bool: ...
    #     def isModal(self) -> bool: ...
    #     def isRightToLeft(self) -> bool: ...
    #     def isTopLevel(self) -> bool: ...
    #     def isVisible(self) -> bool: ...
    #     def isVisibleTo(self, arg__1: PySide6.QtWidgets.QWidget) -> bool: ...
    #     def isWindow(self) -> bool: ...
    #     def isWindowModified(self) -> bool: ...
    #     def keyPressEvent(self, event: PySide6.QtGui.QKeyEvent) -> None: ...
    #     def keyReleaseEvent(self, event: PySide6.QtGui.QKeyEvent) -> None: ...
    #     @staticmethod
    #     def keyboardGrabber() -> PySide6.QtWidgets.QWidget: ...
    #     def layout(self) -> PySide6.QtWidgets.QLayout: ...
    #     def layoutDirection(self) -> PySide6.QtCore.Qt.LayoutDirection: ...
    #     def leaveEvent(self, event: PySide6.QtCore.QEvent) -> None: ...
    #     def locale(self) -> PySide6.QtCore.QLocale: ...
    #     def lower(self) -> None: ...
    #     @overload
    #     def mapFrom(self, arg__1: PySide6.QtWidgets.QWidget, arg__2: PySide6.QtCore.QPoint) -> PySide6.QtCore.QPoint: ...
    #     @overload
    #     def mapFrom(self, arg__1: PySide6.QtWidgets.QWidget, arg__2: Union[PySide6.QtCore.QPointF, PySide6.QtCore.QPoint, PySide6.QtGui.QPainterPath.Element]) -> PySide6.QtCore.QPointF: ...
    #     @overload
    #     def mapFromGlobal(self, arg__1: PySide6.QtCore.QPoint) -> PySide6.QtCore.QPoint: ...
    #     @overload
    #     def mapFromGlobal(self, arg__1: Union[PySide6.QtCore.QPointF, PySide6.QtCore.QPoint, PySide6.QtGui.QPainterPath.Element]) -> PySide6.QtCore.QPointF: ...
    #     @overload
    #     def mapFromParent(self, arg__1: PySide6.QtCore.QPoint) -> PySide6.QtCore.QPoint: ...
    #     @overload
    #     def mapFromParent(self, arg__1: Union[PySide6.QtCore.QPointF, PySide6.QtCore.QPoint, PySide6.QtGui.QPainterPath.Element]) -> PySide6.QtCore.QPointF: ...
    #     @overload
    #     def mapTo(self, arg__1: PySide6.QtWidgets.QWidget, arg__2: PySide6.QtCore.QPoint) -> PySide6.QtCore.QPoint: ...
    #     @overload
    #     def mapTo(self, arg__1: PySide6.QtWidgets.QWidget, arg__2: Union[PySide6.QtCore.QPointF, PySide6.QtCore.QPoint, PySide6.QtGui.QPainterPath.Element]) -> PySide6.QtCore.QPointF: ...
    #     @overload
    #     def mapToGlobal(self, arg__1: PySide6.QtCore.QPoint) -> PySide6.QtCore.QPoint: ...
    #     @overload
    #     def mapToGlobal(self, arg__1: Union[PySide6.QtCore.QPointF, PySide6.QtCore.QPoint, PySide6.QtGui.QPainterPath.Element]) -> PySide6.QtCore.QPointF: ...
    #     @overload
    #     def mapToParent(self, arg__1: PySide6.QtCore.QPoint) -> PySide6.QtCore.QPoint: ...
    #     @overload
    #     def mapToParent(self, arg__1: Union[PySide6.QtCore.QPointF, PySide6.QtCore.QPoint, PySide6.QtGui.QPainterPath.Element]) -> PySide6.QtCore.QPointF: ...
    #     def mask(self) -> PySide6.QtGui.QRegion: ...
    #     def maximumHeight(self) -> int: ...
    #     def maximumSize(self) -> PySide6.QtCore.QSize: ...
    #     def maximumWidth(self) -> int: ...
    #     def metric(self, arg__1: PySide6.QtGui.QPaintDevice.PaintDeviceMetric) -> int: ...
    #     def minimumHeight(self) -> int: ...
    #     def minimumSize(self) -> PySide6.QtCore.QSize: ...
    #     def minimumSizeHint(self) -> PySide6.QtCore.QSize: ...
    #     def minimumWidth(self) -> int: ...
    #     def mouseDoubleClickEvent(self, event: PySide6.QtGui.QMouseEvent) -> None: ...
    #     @staticmethod
    #     def mouseGrabber() -> PySide6.QtWidgets.QWidget: ...
    #     def mouseMoveEvent(self, event: PySide6.QtGui.QMouseEvent) -> None: ...
    #     def mousePressEvent(self, event: PySide6.QtGui.QMouseEvent) -> None: ...
    #     def mouseReleaseEvent(self, event: PySide6.QtGui.QMouseEvent) -> None: ...
    #     @overload
    #     def move(self, arg__1: PySide6.QtCore.QPoint) -> None: ...
    #     @overload
    #     def move(self, x: int, y: int) -> None: ...
    #     def moveEvent(self, event: PySide6.QtGui.QMoveEvent) -> None: ...
    #     def nativeEvent(self, eventType: Union[PySide6.QtCore.QByteArray, bytes], message: int) -> object: ...
    #     def nativeParentWidget(self) -> PySide6.QtWidgets.QWidget: ...
    #     def nextInFocusChain(self) -> PySide6.QtWidgets.QWidget: ...
    #     def normalGeometry(self) -> PySide6.QtCore.QRect: ...
    #     def overrideWindowFlags(self, type: PySide6.QtCore.Qt.WindowType) -> None: ...
    #     def overrideWindowState(self, state: PySide6.QtCore.Qt.WindowState) -> None: ...
    #     def paintEngine(self) -> PySide6.QtGui.QPaintEngine: ...
    #     def paintEvent(self, event: PySide6.QtGui.QPaintEvent) -> None: ...
    #     def palette(self) -> PySide6.QtGui.QPalette: ...
    #     def parentWidget(self) -> PySide6.QtWidgets.QWidget: ...
    #     def pos(self) -> PySide6.QtCore.QPoint: ...
    #     def previousInFocusChain(self) -> PySide6.QtWidgets.QWidget: ...
    #     def raise_(self) -> None: ...
    #     def rect(self) -> PySide6.QtCore.QRect: ...
    #     def redirected(self, offset: PySide6.QtCore.QPoint) -> PySide6.QtGui.QPaintDevice: ...
    #     def releaseKeyboard(self) -> None: ...
    #     def releaseMouse(self) -> None: ...
    #     def releaseShortcut(self, id: int) -> None: ...
    #     def removeAction(self, action: PySide6.QtGui.QAction) -> None: ...
    #     @overload
    #     def render(self, painter: PySide6.QtGui.QPainter, targetOffset: PySide6.QtCore.QPoint, sourceRegion: Union[PySide6.QtGui.QRegion, PySide6.QtGui.QBitmap, PySide6.QtGui.QPolygon, PySide6.QtCore.QRect] = ..., renderFlags: PySide6.QtWidgets.QWidget.RenderFlag = ...) -> None: ...
    #     @overload
    #     def render(self, target: PySide6.QtGui.QPaintDevice, targetOffset: PySide6.QtCore.QPoint = ..., sourceRegion: Union[PySide6.QtGui.QRegion, PySide6.QtGui.QBitmap, PySide6.QtGui.QPolygon, PySide6.QtCore.QRect] = ..., renderFlags: PySide6.QtWidgets.QWidget.RenderFlag = ...) -> None: ...
    #     @overload
    #     def repaint(self) -> None: ...
    #     @overload
    #     def repaint(self, arg__1: PySide6.QtCore.QRect) -> None: ...
    #     @overload
    #     def repaint(self, arg__1: Union[PySide6.QtGui.QRegion, PySide6.QtGui.QBitmap, PySide6.QtGui.QPolygon, PySide6.QtCore.QRect]) -> None: ...
    #     @overload
    #     def repaint(self, x: int, y: int, w: int, h: int) -> None: ...
    #     @overload
    #     def resize(self, arg__1: PySide6.QtCore.QSize) -> None: ...

    def resize(self, w: int, h: int) -> None:
        """
        Resizes the widget to have a width of `w` pixels and a height of `h` pixels.

        Args:
            w (int): The width of the widget in pixels.
            h (int): The height of the widget in pixels.

        <br>
        <br>
        """

    #     def resizeEvent(self, event: PySide6.QtGui.QResizeEvent) -> None: ...
    #     def restoreGeometry(self, geometry: Union[PySide6.QtCore.QByteArray, bytes]) -> bool: ...
    #     def saveGeometry(self) -> PySide6.QtCore.QByteArray: ...
    #     def screen(self) -> PySide6.QtGui.QScreen: ...
    #     @overload
    #     def scroll(self, dx: int, dy: int) -> None: ...
    #     @overload
    #     def scroll(self, dx: int, dy: int, arg__3: PySide6.QtCore.QRect) -> None: ...
    #     def setAcceptDrops(self, on: bool) -> None: ...
    #     def setAccessibleDescription(self, description: str) -> None: ...
    #     def setAccessibleName(self, name: str) -> None: ...
    #     def setAttribute(self, arg__1: PySide6.QtCore.Qt.WidgetAttribute, on: bool = ...) -> None: ...
    #     def setAutoFillBackground(self, enabled: bool) -> None: ...
    #     def setBackgroundRole(self, arg__1: PySide6.QtGui.QPalette.ColorRole) -> None: ...
    #     @overload
    #     def setBaseSize(self, arg__1: PySide6.QtCore.QSize) -> None: ...
    #     @overload
    #     def setBaseSize(self, basew: int, baseh: int) -> None: ...
    #     @overload
    #     def setContentsMargins(self, left: int, top: int, right: int, bottom: int) -> None: ...
    #     @overload
    #     def setContentsMargins(self, margins: PySide6.QtCore.QMargins) -> None: ...
    #     def setContextMenuPolicy(self, policy: PySide6.QtCore.Qt.ContextMenuPolicy) -> None: ...
    #     def setCursor(self, arg__1: Union[PySide6.QtGui.QCursor, PySide6.QtCore.Qt.CursorShape, PySide6.QtGui.QPixmap]) -> None: ...
    #     def setDisabled(self, arg__1: bool) -> None: ...
    #     def setEnabled(self, arg__1: bool) -> None: ...
    #     def setFixedHeight(self, h: int) -> None: ...
    #     @overload
    #     def setFixedSize(self, arg__1: PySide6.QtCore.QSize) -> None: ...
    #     @overload
    #     def setFixedSize(self, w: int, h: int) -> None: ...
    #     def setFixedWidth(self, w: int) -> None: ...
    #     @overload
    #     def setFocus(self) -> None: ...
    #     @overload
    #     def setFocus(self, reason: PySide6.QtCore.Qt.FocusReason) -> None: ...
    #     def setFocusPolicy(self, policy: PySide6.QtCore.Qt.FocusPolicy) -> None: ...
    #     def setFocusProxy(self, arg__1: PySide6.QtWidgets.QWidget) -> None: ...
    #     def setFont(self, arg__1: Union[PySide6.QtGui.QFont, str, Sequence[str]]) -> None: ...
    #     def setForegroundRole(self, arg__1: PySide6.QtGui.QPalette.ColorRole) -> None: ...
    #     @overload
    #     def setGeometry(self, arg__1: PySide6.QtCore.QRect) -> None: ...
    #     @overload
    #     def setGeometry(self, x: int, y: int, w: int, h: int) -> None: ...
    #     def setGraphicsEffect(self, effect: PySide6.QtWidgets.QGraphicsEffect) -> None: ...
    #     def setHidden(self, hidden: bool) -> None: ...
    #     def setInputMethodHints(self, hints: PySide6.QtCore.Qt.InputMethodHint) -> None: ...
    #     def setLayout(self, arg__1: PySide6.QtWidgets.QLayout) -> None: ...
    #     def setLayoutDirection(self, direction: PySide6.QtCore.Qt.LayoutDirection) -> None: ...
    #     def setLocale(self, locale: Union[PySide6.QtCore.QLocale, PySide6.QtCore.QLocale.Language]) -> None: ...
    #     @overload
    #     def setMask(self, arg__1: Union[PySide6.QtGui.QBitmap, str]) -> None: ...
    #     @overload
    #     def setMask(self, arg__1: Union[PySide6.QtGui.QRegion, PySide6.QtGui.QBitmap, PySide6.QtGui.QPolygon, PySide6.QtCore.QRect]) -> None: ...
    #     def setMaximumHeight(self, maxh: int) -> None: ...
    #     @overload
    #     def setMaximumSize(self, arg__1: PySide6.QtCore.QSize) -> None: ...
    #     @overload
    #     def setMaximumSize(self, maxw: int, maxh: int) -> None: ...
    #     def setMaximumWidth(self, maxw: int) -> None: ...
    #     def setMinimumHeight(self, minh: int) -> None: ...
    #     @overload
    #     def setMinimumSize(self, arg__1: PySide6.QtCore.QSize) -> None: ...
    #     @overload
    #     def setMinimumSize(self, minw: int, minh: int) -> None: ...
    #     def setMinimumWidth(self, minw: int) -> None: ...
    #     def setMouseTracking(self, enable: bool) -> None: ...
    #     def setPalette(self, arg__1: Union[PySide6.QtGui.QPalette, PySide6.QtCore.Qt.GlobalColor, PySide6.QtGui.QColor]) -> None: ...
    #     @overload
    #     def setParent(self, parent: Optional[PySide6.QtWidgets.QWidget]) -> None: ...
    #     @overload
    #     def setParent(self, parent: Optional[PySide6.QtWidgets.QWidget], f: PySide6.QtCore.Qt.WindowType) -> None: ...
    #     def setScreen(self, arg__1: PySide6.QtGui.QScreen) -> None: ...
    #     def setShortcutAutoRepeat(self, id: int, enable: bool = ...) -> None: ...
    #     def setShortcutEnabled(self, id: int, enable: bool = ...) -> None: ...
    #     @overload
    #     def setSizeIncrement(self, arg__1: PySide6.QtCore.QSize) -> None: ...
    #     @overload
    #     def setSizeIncrement(self, w: int, h: int) -> None: ...
    #     @overload
    #     def setSizePolicy(self, arg__1: PySide6.QtWidgets.QSizePolicy) -> None: ...
    #     @overload
    #     def setSizePolicy(self, horizontal: PySide6.QtWidgets.QSizePolicy.Policy, vertical: PySide6.QtWidgets.QSizePolicy.Policy) -> None: ...
    #     def setStatusTip(self, arg__1: str) -> None: ...
    #     def setStyle(self, arg__1: PySide6.QtWidgets.QStyle) -> None: ...
    #     def setStyleSheet(self, styleSheet: str) -> None: ...
    #     @staticmethod
    #     def setTabOrder(arg__1: PySide6.QtWidgets.QWidget, arg__2: PySide6.QtWidgets.QWidget) -> None: ...
    #     def setTabletTracking(self, enable: bool) -> None: ...
    #     def setToolTip(self, arg__1: str) -> None: ...
    #     def setToolTipDuration(self, msec: int) -> None: ...
    #     def setUpdatesEnabled(self, enable: bool) -> None: ...
    #     def setVisible(self, visible: bool) -> None: ...
    #     def setWhatsThis(self, arg__1: str) -> None: ...
    #     def setWindowFilePath(self, filePath: str) -> None: ...
    #     def setWindowFlag(self, arg__1: PySide6.QtCore.Qt.WindowType, on: bool = ...) -> None: ...
    #     def setWindowFlags(self, type: PySide6.QtCore.Qt.WindowType) -> None: ...
    #     def setWindowIcon(self, icon: Union[PySide6.QtGui.QIcon, PySide6.QtGui.QPixmap]) -> None: ...
    #     def setWindowIconText(self, arg__1: str) -> None: ...
    #     def setWindowModality(self, windowModality: PySide6.QtCore.Qt.WindowModality) -> None: ...
    #     def setWindowModified(self, arg__1: bool) -> None: ...
    #     def setWindowOpacity(self, level: float) -> None: ...
    #     def setWindowRole(self, arg__1: str) -> None: ...
    #     def setWindowState(self, state: PySide6.QtCore.Qt.WindowState) -> None: ...
    #     def setWindowTitle(self, arg__1: str) -> None: ...
    #     def sharedPainter(self) -> PySide6.QtGui.QPainter: ...
    def show(self) -> None:
        """
        Shows the widget and its child widgets.
        """


#     def showEvent(self, event: PySide6.QtGui.QShowEvent) -> None: ...
#     def showFullScreen(self) -> None: ...
#     def showMaximized(self) -> None: ...
#     def showMinimized(self) -> None: ...
#     def showNormal(self) -> None: ...
#     def size(self) -> PySide6.QtCore.QSize: ...
#     def sizeHint(self) -> PySide6.QtCore.QSize: ...
#     def sizeIncrement(self) -> PySide6.QtCore.QSize: ...
#     def sizePolicy(self) -> PySide6.QtWidgets.QSizePolicy: ...
#     def stackUnder(self, arg__1: PySide6.QtWidgets.QWidget) -> None: ...
#     def statusTip(self) -> str: ...
#     def style(self) -> PySide6.QtWidgets.QStyle: ...
#     def styleSheet(self) -> str: ...
#     def tabletEvent(self, event: PySide6.QtGui.QTabletEvent) -> None: ...
#     def testAttribute(self, arg__1: PySide6.QtCore.Qt.WidgetAttribute) -> bool: ...
#     def toolTip(self) -> str: ...
#     def toolTipDuration(self) -> int: ...
#     def topLevelWidget(self) -> PySide6.QtWidgets.QWidget: ...
#     def underMouse(self) -> bool: ...
#     def ungrabGesture(self, type: PySide6.QtCore.Qt.GestureType) -> None: ...
#     def unsetCursor(self) -> None: ...
#     def unsetLayoutDirection(self) -> None: ...
#     def unsetLocale(self) -> None: ...
#     @overload
#     def update(self) -> None: ...
#     @overload
#     def update(self, arg__1: PySide6.QtCore.QRect) -> None: ...
#     @overload
#     def update(self, arg__1: Union[PySide6.QtGui.QRegion, PySide6.QtGui.QBitmap, PySide6.QtGui.QPolygon, PySide6.QtCore.QRect]) -> None: ...
#     @overload
#     def update(self, x: int, y: int, w: int, h: int) -> None: ...
#     def updateGeometry(self) -> None: ...
#     def updateMicroFocus(self, query: PySide6.QtCore.Qt.InputMethodQuery = ...) -> None: ...
#     def updatesEnabled(self) -> bool: ...
#     def visibleRegion(self) -> PySide6.QtGui.QRegion: ...
#     def whatsThis(self) -> str: ...
#     def wheelEvent(self, event: PySide6.QtGui.QWheelEvent) -> None: ...
#     def width(self) -> int: ...
#     def winId(self) -> int: ...
#     def window(self) -> PySide6.QtWidgets.QWidget: ...
#     def windowFilePath(self) -> str: ...
#     def windowFlags(self) -> PySide6.QtCore.Qt.WindowType: ...
#     def windowHandle(self) -> PySide6.QtGui.QWindow: ...
#     def windowIcon(self) -> PySide6.QtGui.QIcon: ...
#     def windowIconText(self) -> str: ...
#     def windowModality(self) -> PySide6.QtCore.Qt.WindowModality: ...
#     def windowOpacity(self) -> float: ...
#     def windowRole(self) -> str: ...
#     def windowState(self) -> PySide6.QtCore.Qt.WindowState: ...
#     def windowTitle(self) -> str: ...
#     def windowType(self) -> PySide6.QtCore.Qt.WindowType: ...
#     def x(self) -> int: ...
#     def y(self) -> int: ...


class QLayout:
    """
    <hr>

    QLayout is the base class of all layout objects in PySide6.QtWidgets.

    <hr>

    <br>
    """


#     class SizeConstraint(enum.Enum):

#         SetDefaultConstraint     : QLayout.SizeConstraint = ... # 0x0
#         SetNoConstraint          : QLayout.SizeConstraint = ... # 0x1
#         SetMinimumSize           : QLayout.SizeConstraint = ... # 0x2
#         SetFixedSize             : QLayout.SizeConstraint = ... # 0x3
#         SetMaximumSize           : QLayout.SizeConstraint = ... # 0x4
#         SetMinAndMaxSize         : QLayout.SizeConstraint = ... # 0x5

#     def __init__(self, parent: Optional[PySide6.QtWidgets.QWidget] = ...) -> None: ...

#     def activate(self) -> bool: ...
#     def addChildLayout(self, l: PySide6.QtWidgets.QLayout) -> None: ...
#     def addChildWidget(self, w: PySide6.QtWidgets.QWidget) -> None: ...
#     def addItem(self, arg__1: PySide6.QtWidgets.QLayoutItem) -> None: ...
#     def addWidget(self, w: PySide6.QtWidgets.QWidget) -> None: ...
#     def adoptLayout(self, layout: PySide6.QtWidgets.QLayout) -> bool: ...
#     def alignmentRect(self, arg__1: PySide6.QtCore.QRect) -> PySide6.QtCore.QRect: ...
#     def childEvent(self, e: PySide6.QtCore.QChildEvent) -> None: ...
#     @staticmethod
#     def closestAcceptableSize(w: PySide6.QtWidgets.QWidget, s: PySide6.QtCore.QSize) -> PySide6.QtCore.QSize: ...
#     def contentsMargins(self) -> PySide6.QtCore.QMargins: ...
#     def contentsRect(self) -> PySide6.QtCore.QRect: ...
#     def controlTypes(self) -> PySide6.QtWidgets.QSizePolicy.ControlType: ...
#     def count(self) -> int: ...
#     def expandingDirections(self) -> PySide6.QtCore.Qt.Orientation: ...
#     def geometry(self) -> PySide6.QtCore.QRect: ...
#     def getContentsMargins(self) -> object: ...
#     @overload
#     def indexOf(self, arg__1: PySide6.QtWidgets.QLayoutItem) -> int: ...
#     @overload
#     def indexOf(self, arg__1: PySide6.QtWidgets.QWidget) -> int: ...
#     def invalidate(self) -> None: ...
#     def isEmpty(self) -> bool: ...
#     def isEnabled(self) -> bool: ...
#     def itemAt(self, index: int) -> PySide6.QtWidgets.QLayoutItem: ...
#     def layout(self) -> PySide6.QtWidgets.QLayout: ...
#     def maximumSize(self) -> PySide6.QtCore.QSize: ...
#     def menuBar(self) -> PySide6.QtWidgets.QWidget: ...
#     def minimumSize(self) -> PySide6.QtCore.QSize: ...
#     def parentWidget(self) -> PySide6.QtWidgets.QWidget: ...
#     def removeItem(self, arg__1: PySide6.QtWidgets.QLayoutItem) -> None: ...
#     def removeWidget(self, w: PySide6.QtWidgets.QWidget) -> None: ...
#     def replaceWidget(self, from_: PySide6.QtWidgets.QWidget, to: PySide6.QtWidgets.QWidget, options: PySide6.QtCore.Qt.FindChildOption = ...) -> PySide6.QtWidgets.QLayoutItem: ...
#     @overload
#     def setAlignment(self, arg__1: PySide6.QtCore.Qt.AlignmentFlag) -> None: ...
#     @overload
#     def setAlignment(self, l: PySide6.QtWidgets.QLayout, alignment: PySide6.QtCore.Qt.AlignmentFlag) -> bool: ...
#     @overload
#     def setAlignment(self, w: PySide6.QtWidgets.QWidget, alignment: PySide6.QtCore.Qt.AlignmentFlag) -> bool: ...
#     @overload
#     def setContentsMargins(self, left: int, top: int, right: int, bottom: int) -> None: ...
#     @overload
#     def setContentsMargins(self, margins: PySide6.QtCore.QMargins) -> None: ...
#     def setEnabled(self, arg__1: bool) -> None: ...
#     def setGeometry(self, arg__1: PySide6.QtCore.QRect) -> None: ...
#     def setMenuBar(self, w: PySide6.QtWidgets.QWidget) -> None: ...
#     def setSizeConstraint(self, arg__1: PySide6.QtWidgets.QLayout.SizeConstraint) -> None: ...
#     def setSpacing(self, arg__1: int) -> None: ...
#     def sizeConstraint(self) -> PySide6.QtWidgets.QLayout.SizeConstraint: ...
#     def spacing(self) -> int: ...
#     def takeAt(self, index: int) -> PySide6.QtWidgets.QLayoutItem: ...
#     def totalHeightForWidth(self, w: int) -> int: ...
#     def totalMaximumSize(self) -> PySide6.QtCore.QSize: ...
#     def totalMinimumHeightForWidth(self, w: int) -> int: ...
#     def totalMinimumSize(self) -> PySide6.QtCore.QSize: ...
#     def totalSizeHint(self) -> PySide6.QtCore.QSize: ...
#     def unsetContentsMargins(self) -> None: ...
#     def update(self) -> None: ...
#     def widgetEvent(self, arg__1: PySide6.QtCore.QEvent) -> None: ...


class QApplication:
    """
    <hr>

    The <code>QApplication</code> class manages the GUI application's control flow and main settings.
    It is the starting point for the GUI application. Every GUI application must have exactly one
    instance of this class.

    <hr>

    <h3>Methods</h3>

    <ul>
        <li><a href="#code.QtWidgets.QApplication.exec"><code>exec</code></a></li>
    </ul>

    <br>

    **Examples**
    <hr>
    ``` py
    app = QApplication()
    window = QMainWindow()
    window.show()
    app.exec()
    ```
    In the above example, an instance of the `QApplication` class is created and
    a [`QMainWindow`](QMainWindow.md) is created and shown. The `exec` method is then called to start
    the application event loop. Running the above code will display an empty window.

    <hr>
    <br>
    """

    #     focusChanged             : ClassVar[Signal] = ... # focusChanged(QWidget*,QWidget*)

    #     @overload
    #     def __init__(self) -> None: ...
    @overload
    def __init__(self, arg__1: Sequence[str] = None) -> None: ...

    #     @staticmethod
    #     def aboutQt() -> None: ...
    #     @staticmethod
    #     def activeModalWidget() -> PySide6.QtWidgets.QWidget: ...
    #     @staticmethod
    #     def activePopupWidget() -> PySide6.QtWidgets.QWidget: ...
    #     @staticmethod
    #     def activeWindow() -> PySide6.QtWidgets.QWidget: ...
    #     @staticmethod
    #     def alert(widget: PySide6.QtWidgets.QWidget, duration: int = ...) -> None: ...
    #     @staticmethod
    #     def allWidgets() -> List[PySide6.QtWidgets.QWidget]: ...
    #     def autoSipEnabled(self) -> bool: ...
    #     @staticmethod
    #     def beep() -> None: ...
    #     @staticmethod
    #     def closeAllWindows() -> None: ...
    #     @staticmethod
    #     def cursorFlashTime() -> int: ...
    #     @staticmethod
    #     def doubleClickInterval() -> int: ...
    #     def event(self, arg__1: PySide6.QtCore.QEvent) -> bool: ...

    def exec() -> int:
        """
        Enters the main event loop and waits the application to finish. The event
        loop is quit when the last window is closed.

        Returns:
            The return code of the application.
        <br>
        <br>
        """

    #     def exec_(self) -> int: ...
    #     @staticmethod
    #     def focusWidget() -> PySide6.QtWidgets.QWidget: ...
    #     @overload
    #     @staticmethod
    #     def font() -> PySide6.QtGui.QFont: ...
    #     @overload
    #     @staticmethod
    #     def font(arg__1: PySide6.QtWidgets.QWidget) -> PySide6.QtGui.QFont: ...
    #     @overload
    #     @staticmethod
    #     def font(className: bytes) -> PySide6.QtGui.QFont: ...
    #     @staticmethod
    #     def fontMetrics() -> PySide6.QtGui.QFontMetrics: ...
    #     @staticmethod
    #     def isEffectEnabled(arg__1: PySide6.QtCore.Qt.UIEffect) -> bool: ...
    #     @staticmethod
    #     def keyboardInputInterval() -> int: ...
    #     def notify(self, arg__1: PySide6.QtCore.QObject, arg__2: PySide6.QtCore.QEvent) -> bool: ...
    #     @overload
    #     @staticmethod
    #     def palette() -> PySide6.QtGui.QPalette: ...
    #     @overload
    #     @staticmethod
    #     def palette(arg__1: PySide6.QtWidgets.QWidget) -> PySide6.QtGui.QPalette: ...
    #     @overload
    #     @staticmethod
    #     def palette(className: bytes) -> PySide6.QtGui.QPalette: ...
    #     def resolveInterface(self, name: bytes, revision: int) -> int: ...
    #     @staticmethod
    #     def setActiveWindow(act: PySide6.QtWidgets.QWidget) -> None: ...
    #     def setAutoSipEnabled(self, enabled: bool) -> None: ...
    #     @staticmethod
    #     def setCursorFlashTime(arg__1: int) -> None: ...
    #     @staticmethod
    #     def setDoubleClickInterval(arg__1: int) -> None: ...
    #     @staticmethod
    #     def setEffectEnabled(arg__1: PySide6.QtCore.Qt.UIEffect, enable: bool = ...) -> None: ...
    #     @staticmethod
    #     def setFont(arg__1: Union[PySide6.QtGui.QFont, str, Sequence[str]], className: Optional[bytes] = ...) -> None: ...
    #     @staticmethod
    #     def setKeyboardInputInterval(arg__1: int) -> None: ...
    #     @staticmethod
    #     def setPalette(arg__1: Union[PySide6.QtGui.QPalette, PySide6.QtCore.Qt.GlobalColor, PySide6.QtGui.QColor], className: Optional[bytes] = ...) -> None: ...
    #     @staticmethod
    #     def setStartDragDistance(l: int) -> None: ...
    #     @staticmethod
    #     def setStartDragTime(ms: int) -> None: ...
    #     @overload
    #     @staticmethod
    #     def setStyle(arg__1: PySide6.QtWidgets.QStyle) -> None: ...
    #     @overload
    #     @staticmethod
    #     def setStyle(arg__1: str) -> PySide6.QtWidgets.QStyle: ...
    #     def setStyleSheet(self, sheet: str) -> None: ...
    #     @staticmethod
    #     def setWheelScrollLines(arg__1: int) -> None: ...
    #     @staticmethod
    #     def startDragDistance() -> int: ...
    #     @staticmethod
    #     def startDragTime() -> int: ...
    #     @staticmethod
    #     def style() -> PySide6.QtWidgets.QStyle: ...
    #     def styleSheet(self) -> str: ...
    #     @overload
    #     @staticmethod
    #     def topLevelAt(p: PySide6.QtCore.QPoint) -> PySide6.QtWidgets.QWidget: ...
    #     @overload
    #     @staticmethod
    #     def topLevelAt(x: int, y: int) -> PySide6.QtWidgets.QWidget: ...
    #     @staticmethod
    #     def topLevelWidgets() -> List[PySide6.QtWidgets.QWidget]: ...
    #     @staticmethod
    #     def wheelScrollLines() -> int: ...
    #     @overload
    #     @staticmethod
    #     def widgetAt(p: PySide6.QtCore.QPoint) -> PySide6.QtWidgets.QWidget: ...
    #     @overload
    #     @staticmethod
    #     def widgetAt(x: int, y: int) -> PySide6.QtWidgets.QWidget: ...


class QMainWindow:
    """
    <hr>

    A main window provides a framework for building an application's user interface.
    Every user interface has to have a <code>QMainWindow</code>. It has to
    have a central widget, which is the main widget in the window. The central widget
    can be a <a href="../../PyQtWidgets"><code>QWidget</code></a> or any other widget subclass.
    To this central widget, you can add other layouts, such as <a href="../QHBoxLayout"><code>QHBoxLayout</code></a>
    and <a href="../QVBoxLayout"><code>QVBoxLayout</code></a>.

    <hr>

    <h3>Methods</h3>
    <ul>
        <li><a href="#code.QtWidgets.QMainWindow.setCentralWidget"><code>setCentralWidget</code></a></li>
        <li><a href="#code.QtWidgets.QMainWindow.show"><code>show</code></a></li>
    </ul>

    <br>

    **Examples**
        <hr>
        ``` py

        class UserInterface(QMainWindow):
            def __init__(self):

                # Call the QMainWindow __init__ method.
                super().__init__()

                # Set the central widget; every QMainWindow must have a central widget.
                central_widget = QWidget()
                self.setCentralWidget(QWidget())

                # Add a layout to the central widget.
                layout = QVBoxLayout(central_widget)

        def main():

            # Create the application object.
            app = QApplication()

            # Create the main window, show it, and start the event loop.
            window = UserInterface()
            window.show()
            app.exec()
        ```
        In the above example, a simple user interface is created using the `QMainWindow` class.
        We create a class called `UserInterface` that inherits from
        `QMainWindow`. We then call the `__init__` method of the `QMainWindow` class using
        the `super()` function. We then create a central widget and set it as the central
        widget of the main window and add a layout to the central widget.
        Finally, we create an instance of the `UserInterface` class, show the main window,
        and start the application event loop.
        <br>
        Running the `main` function in the above code will display a window with a vertical layout.

    <hr>

    <br>
    """

    # iconSizeChanged          : ClassVar[Signal] = ... # iconSizeChanged(QSize)
    # tabifiedDockWidgetActivated: ClassVar[Signal] = ... # tabifiedDockWidgetActivated(QDockWidget*)
    # toolButtonStyleChanged   : ClassVar[Signal] = ... # toolButtonStyleChanged(Qt::ToolButtonStyle)

    # class DockOption(enum.Flag):

    #     AnimatedDocks            : QMainWindow.DockOption = ... # 0x1
    #     AllowNestedDocks         : QMainWindow.DockOption = ... # 0x2
    #     AllowTabbedDocks         : QMainWindow.DockOption = ... # 0x4
    #     ForceTabbedDocks         : QMainWindow.DockOption = ... # 0x8
    #     VerticalTabs             : QMainWindow.DockOption = ... # 0x10
    #     GroupedDragging          : QMainWindow.DockOption = ... # 0x20

    # def __init__(self, parent: Optional[PySide6.QtWidgets.QWidget] = ..., flags: PySide6.QtCore.Qt.WindowType = ...) -> None: ...

    # @overload
    # def addDockWidget(self, area: PySide6.QtCore.Qt.DockWidgetArea, dockwidget: PySide6.QtWidgets.QDockWidget) -> None: ...
    # @overload
    # def addDockWidget(self, area: PySide6.QtCore.Qt.DockWidgetArea, dockwidget: PySide6.QtWidgets.QDockWidget, orientation: PySide6.QtCore.Qt.Orientation) -> None: ...
    # @overload
    # def addToolBar(self, area: PySide6.QtCore.Qt.ToolBarArea, toolbar: PySide6.QtWidgets.QToolBar) -> None: ...
    # @overload
    # def addToolBar(self, title: str) -> PySide6.QtWidgets.QToolBar: ...
    # @overload
    # def addToolBar(self, toolbar: PySide6.QtWidgets.QToolBar) -> None: ...
    # def addToolBarBreak(self, area: PySide6.QtCore.Qt.ToolBarArea = ...) -> None: ...
    # def centralWidget(self) -> PySide6.QtWidgets.QWidget: ...
    # def contextMenuEvent(self, event: PySide6.QtGui.QContextMenuEvent) -> None: ...
    # def corner(self, corner: PySide6.QtCore.Qt.Corner) -> PySide6.QtCore.Qt.DockWidgetArea: ...
    # def createPopupMenu(self) -> PySide6.QtWidgets.QMenu: ...
    # def dockOptions(self) -> PySide6.QtWidgets.QMainWindow.DockOption: ...
    # def dockWidgetArea(self, dockwidget: PySide6.QtWidgets.QDockWidget) -> PySide6.QtCore.Qt.DockWidgetArea: ...
    # def documentMode(self) -> bool: ...
    # def event(self, event: PySide6.QtCore.QEvent) -> bool: ...
    # def iconSize(self) -> PySide6.QtCore.QSize: ...
    # def insertToolBar(self, before: PySide6.QtWidgets.QToolBar, toolbar: PySide6.QtWidgets.QToolBar) -> None: ...
    # def insertToolBarBreak(self, before: PySide6.QtWidgets.QToolBar) -> None: ...
    # def isAnimated(self) -> bool: ...
    # def isDockNestingEnabled(self) -> bool: ...
    # def isSeparator(self, pos: PySide6.QtCore.QPoint) -> bool: ...
    # def menuBar(self) -> PySide6.QtWidgets.QMenuBar: ...
    # def menuWidget(self) -> PySide6.QtWidgets.QWidget: ...
    # def removeDockWidget(self, dockwidget: PySide6.QtWidgets.QDockWidget) -> None: ...
    # def removeToolBar(self, toolbar: PySide6.QtWidgets.QToolBar) -> None: ...
    # def removeToolBarBreak(self, before: PySide6.QtWidgets.QToolBar) -> None: ...
    # def resizeDocks(self, docks: Sequence[PySide6.QtWidgets.QDockWidget], sizes: Sequence[int], orientation: PySide6.QtCore.Qt.Orientation) -> None: ...
    # def restoreDockWidget(self, dockwidget: PySide6.QtWidgets.QDockWidget) -> bool: ...
    # def restoreState(self, state: Union[PySide6.QtCore.QByteArray, bytes], version: int = ...) -> bool: ...
    # def saveState(self, version: int = ...) -> PySide6.QtCore.QByteArray: ...
    # def setAnimated(self, enabled: bool) -> None: ...
    def setCentralWidget(self, widget: PySide6.QtWidgets.QWidget) -> None:
        """
        Sets the given widget to be the main window's central widget.

        Args:
            widget (PySide6.QtWidgets.QWidget): The widget to set as the central widget.

        <br>
        """

    def show(self) -> None:
        """
        Shows the main window.

        <br>
        """

    # def setCorner(self, corner: PySide6.QtCore.Qt.Corner, area: PySide6.QtCore.Qt.DockWidgetArea) -> None: ...
    # def setDockNestingEnabled(self, enabled: bool) -> None: ...
    # def setDockOptions(self, options: PySide6.QtWidgets.QMainWindow.DockOption) -> None: ...
    # def setDocumentMode(self, enabled: bool) -> None: ...
    # def setIconSize(self, iconSize: PySide6.QtCore.QSize) -> None: ...
    # def setMenuBar(self, menubar: PySide6.QtWidgets.QMenuBar) -> None: ...
    # def setMenuWidget(self, menubar: PySide6.QtWidgets.QWidget) -> None: ...
    # def setStatusBar(self, statusbar: PySide6.QtWidgets.QStatusBar) -> None: ...
    # def setTabPosition(self, areas: PySide6.QtCore.Qt.DockWidgetArea, tabPosition: PySide6.QtWidgets.QTabWidget.TabPosition) -> None: ...
    # def setTabShape(s_summary_elf, tabShape: PySide6.QtWidgets.QTabWidget.TabShape) -> None: ...
    # def setToolButtonStyle(self, toolButtonStyle: PySide6.QtCore.Qt.ToolButtonStyle) -> None: ...
    # def setUnifiedTitleAndToolBarOnMac(self, set: bool) -> None: ...
    # def splitDockWidget(self, after: PySide6.QtWidgets.QDockWidget, dockwidget: PySide6.QtWidgets.QDockWidget, orientation: PySide6.QtCore.Qt.Orientation) -> None: ...
    # def statusBar(self) -> PySide6.QtWidgets.QStatusBar: ...
    # def tabPosition(self, area: PySide6.QtCore.Qt.DockWidgetArea) -> PySide6.QtWidgets.QTabWidget.TabPosition: ...
    # def tabShape(self) -> PySide6.QtWidgets.QTabWidget.TabShape: ...
    # def tabifiedDockWidgets(self, dockwidget: PySide6.QtWidgets.QDockWidget) -> List[PySide6.QtWidgets.QDockWidget]: ...
    # def tabifyDockWidget(self, first: PySide6.QtWidgets.QDockWidget, second: PySide6.QtWidgets.QDockWidget) -> None: ...
    # def takeCentralWidget(self) -> PySide6.QtWidgets.QWidget: ...
    # def toolBarArea(self, toolbar: PySide6.QtWidgets.QToolBar) -> PySide6.QtCore.Qt.ToolBarArea: ...
    # def toolBarBreak(self, toolbar: PySide6.QtWidgets.QToolBar) -> bool: ...
    # def toolButtonStyle(self) -> PySide6.QtCore.Qt.ToolButtonStyle: ...
    # def unifiedTitleAndToolBarOnMac(self) -> bool: ...


class QHBoxLayout:
    """
    <hr>
    The <code>QHBoxLayout</code> class lines up widgets horizontally. If the widgets do not fit
    in the window, the layout will automatically wrap or resize them. For a vertical
    layout, use <a href="../QVBoxLayout"><code>QVBoxLayout</code></a>.

    Args:
        parent (PySide6.QtWidgets.QWidget): Parent widget
    <hr>

    <h3>Methods</h3>
    <ul>
        <li><a href="#code.QtWidgets.QHBoxLayout.addLayout"><code>addLayout</code></a></li>
        <li><a href="#code.QtWidgets.QHBoxLayout.addWidget"><code>addWidget</code></a></li>
    </ul>

    <br>

    **Examples**
    <hr>
    ``` py
    central_widget = QWidget()
    layout = QHBoxLayout(central_widget)
    layout.addWidget(QPushButton("Button 1"))
    layout.addWidget(QPushButton("Button 2"))
    ```
    In the above example, a horizontal layout is created, added to a central
    widget, and two buttons are added to it. The buttons will be displayed
    horizontally.

    <br>

    ``` py
    central_widget = QtWidgets.QWidget()
    layout = QHBoxLayout(central_widget)
    layout.addLayout(QVBoxLayout())
    ```
    In the above example, a horizontal layout is created, added to a central
    widget, and a vertical layout is added to it.
    <hr>

    <br>
    """

    def __init__(self, parent: Optional[PySide6.QtWidgets.QWidget] = None) -> None: ...

    def addLayout(self, layout: PySide6.QtWidgets.QBoxLayout) -> None:
        """Adds a layout to the horizontal box layout

        Args:
            Layout (PySide6.QtWidgets.QBoxLayout): Layout
        <br>
        """

    def addWidget(self, widget: PySide6.QtWidgets.QWidget) -> None:
        """Adds a widget to the horizontal box layout

        Args:
            widget (PySide6.QtWidgets.QWidget): Widget
        <br>
        <br>
        """

    # @overload
    # def __init__(self) -> None: ...
    # @overload
    # def __init__(self, parent: PySide6.QtWidgets.QWidget) -> None: ...


class QVBoxLayout:
    """
    <hr>
    The <code>QVBoxLayout</code> class lines up widgets vertically. If the widgets do not fit
    in the window, the layout will automatically wrap or resize them. For a horizontal
    layout, see <a href="../QHBoxLayout"><code>QHBoxLayout</code></a>.

    Args:
        parent (PySide6.QtWidgets.QWidget): Parent widget.

    <hr>


    <h3>Methods</h3>
    <ul>
        <li><a href="#code.QtWidgets.QVBoxLayout.addLayout"><code>addLayout</code></a></li>
        <li><a href="#code.QtWidgets.QVBoxLayout.addWidget"><code>addWidget</code></a></li>
    </ul>

    <br>

    **Examples**
    <hr>
    ``` py
    vbox = QVBoxLayout()
    textedit = QTextEdit()
    vbox.addWidget(textedit)
    ```
    In the above example, a vertical layout is created and a QTextEdit widget is added to it.

    ``` py
    vbox = QVBoxLayout()
    hbox = QHBoxLayout()
    vbox.addLayout(hbox)
    ```
    In the above example, a vertical layout is created and a horizontal layout is added to it.
    <hr>

    <br>
    """

    def __init__(self, parent: Optional[PySide6.QtWidgets.QWidget] = None) -> None: ...

    def addLayout(self, layout: PySide6.QtWidgets.QBoxLayout) -> None:
        """Adds a layout to the vertical box layout

        Args:
            Layout (PySide6.QtWidgets.QBoxLayout): Layout
        <br>
        """

    def addWidget(self, widget: PySide6.QtWidgets.QWidget) -> None:
        """Adds a widget to the vertical box layout

        Args:
            widget (PySide6.QtWidgets.QWidget): Widget
        <br>
        <br>
        """

    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, parent: PySide6.QtWidgets.QWidget) -> None: ...


class QFormLayout:
    """_summary_"""

    class FieldGrowthPolicy(enum.Enum):

        FieldsStayAtSizeHint: QFormLayout.FieldGrowthPolicy = ...  # 0x0
        ExpandingFieldsGrow: QFormLayout.FieldGrowthPolicy = ...  # 0x1
        AllNonFixedFieldsGrow: QFormLayout.FieldGrowthPolicy = ...  # 0x2

    class ItemRole(enum.Enum):

        LabelRole: QFormLayout.ItemRole = ...  # 0x0
        FieldRole: QFormLayout.ItemRole = ...  # 0x1
        SpanningRole: QFormLayout.ItemRole = ...  # 0x2

    class RowWrapPolicy(enum.Enum):

        DontWrapRows: QFormLayout.RowWrapPolicy = ...  # 0x0
        WrapLongRows: QFormLayout.RowWrapPolicy = ...  # 0x1
        WrapAllRows: QFormLayout.RowWrapPolicy = ...  # 0x2

    class TakeRowResult(Shiboken.Object):
        @overload
        def __init__(self) -> None: ...
        @overload
        def __init__(
            self, TakeRowResult: PySide6.QtWidgets.QFormLayout.TakeRowResult
        ) -> None: ...
        @staticmethod
        def __copy__() -> None: ...

    def __init__(self, parent: Optional[PySide6.QtWidgets.QWidget] = ...) -> None: ...
    def addItem(self, item: PySide6.QtWidgets.QLayoutItem) -> None: ...
    @overload
    def addRow(
        self, label: PySide6.QtWidgets.QWidget, field: PySide6.QtWidgets.QLayout
    ) -> None: ...
    @overload
    def addRow(
        self, label: PySide6.QtWidgets.QWidget, field: PySide6.QtWidgets.QWidget
    ) -> None: ...
    @overload
    def addRow(self, labelText: str, field: PySide6.QtWidgets.QLayout) -> None: ...
    @overload
    def addRow(self, labelText: str, field: PySide6.QtWidgets.QWidget) -> None: ...
    @overload
    def addRow(self, layout: PySide6.QtWidgets.QLayout) -> None: ...
    @overload
    def addRow(self, widget: PySide6.QtWidgets.QWidget) -> None: ...

    # def count(self) -> int: ...
    # def expandingDirections(self) -> PySide6.QtCore.Qt.Orientation: ...
    # def fieldGrowthPolicy(self) -> PySide6.QtWidgets.QFormLayout.FieldGrowthPolicy: ...
    # def formAlignment(self) -> PySide6.QtCore.Qt.AlignmentFlag: ...
    # def getItemPosition(self, index: int) -> object: ...
    # def getLayoutPosition(self, layout: PySide6.QtWidgets.QLayout) -> object: ...
    # def getWidgetPosition(self, widget: PySide6.QtWidgets.QWidget) -> object: ...
    # def hasHeightForWidth(self) -> bool: ...
    # def heightForWidth(self, width: int) -> int: ...
    # def horizontalSpacing(self) -> int: ...
    # @overload
    # def insertRow(self, row: int, label: PySide6.QtWidgets.QWidget, field: PySide6.QtWidgets.QLayout) -> None: ...
    # @overload
    # def insertRow(self, row: int, label: PySide6.QtWidgets.QWidget, field: PySide6.QtWidgets.QWidget) -> None: ...
    # @overload
    # def insertRow(self, row: int, labelText: str, field: PySide6.QtWidgets.QLayout) -> None: ...
    # @overload
    # def insertRow(self, row: int, labelText: str, field: PySide6.QtWidgets.QWidget) -> None: ...
    # @overload
    # def insertRow(self, row: int, layout: PySide6.QtWidgets.QLayout) -> None: ...
    # @overload
    # def insertRow(self, row: int, widget: PySide6.QtWidgets.QWidget) -> None: ...
    # def invalidate(self) -> None: ...
    # @overload
    # def isRowVisible(self, layout: PySide6.QtWidgets.QLayout) -> bool: ...
    # @overload
    # def isRowVisible(self, row: int) -> bool: ...
    # @overload
    # def isRowVisible(self, widget: PySide6.QtWidgets.QWidget) -> bool: ...
    # @overload
    # def itemAt(self, index: int) -> PySide6.QtWidgets.QLayoutItem: ...
    # @overload
    # def itemAt(self, row: int, role: PySide6.QtWidgets.QFormLayout.ItemRole) -> PySide6.QtWidgets.QLayoutItem: ...
    # def labelAlignment(self) -> PySide6.QtCore.Qt.AlignmentFlag: ...
    # @overload
    # def labelForField(self, field: PySide6.QtWidgets.QLayout) -> PySide6.QtWidgets.QWidget: ...
    # @overload
    # def labelForField(self, field: PySide6.QtWidgets.QWidget) -> PySide6.QtWidgets.QWidget: ...
    # def minimumSize(self) -> PySide6.QtCore.QSize: ...
    # @overload
    # def removeRow(self, layout: PySide6.QtWidgets.QLayout) -> None: ...
    # @overload
    # def removeRow(self, row: int) -> None: ...
    # @overload
    # def removeRow(self, widget: PySide6.QtWidgets.QWidget) -> None: ...
    # def rowCount(self) -> int: ...
    # def rowWrapPolicy(self) -> PySide6.QtWidgets.QFormLayout.RowWrapPolicy: ...
    # def setFieldGrowthPolicy(self, policy: PySide6.QtWidgets.QFormLayout.FieldGrowthPolicy) -> None: ...
    # def setFormAlignment(self, alignment: PySide6.QtCore.Qt.AlignmentFlag) -> None: ...
    # def setGeometry(self, rect: PySide6.QtCore.QRect) -> None: ...
    # def setHorizontalSpacing(self, spacing: int) -> None: ...
    # def setItem(self, row: int, role: PySide6.QtWidgets.QFormLayout.ItemRole, item: PySide6.QtWidgets.QLayoutItem) -> None: ...
    # def setLabelAlignment(self, alignment: PySide6.QtCore.Qt.AlignmentFlag) -> None: ...
    # def setLayout(self, row: int, role: PySide6.QtWidgets.QFormLayout.ItemRole, layout: PySide6.QtWidgets.QLayout) -> None: ...
    # @overload
    # def setRowVisible(self, layout: PySide6.QtWidgets.QLayout, on: bool) -> None: ...
    # @overload
    # def setRowVisible(self, row: int, on: bool) -> None: ...
    # @overload
    # def setRowVisible(self, widget: PySide6.QtWidgets.QWidget, on: bool) -> None: ...
    # def setRowWrapPolicy(self, policy: PySide6.QtWidgets.QFormLayout.RowWrapPolicy) -> None: ...
    # def setSpacing(self, arg__1: int) -> None: ...
    # def setVerticalSpacing(self, spacing: int) -> None: ...
    # def setWidget(self, row: int, role: PySide6.QtWidgets.QFormLayout.ItemRole, widget: PySide6.QtWidgets.QWidget) -> None: ...
    # def sizeHint(self) -> PySide6.QtCore.QSize: ...
    # def spacing(self) -> int: ...
    # def takeAt(self, index: int) -> PySide6.QtWidgets.QLayoutItem: ...
    # @overload
    # def takeRow(self, layout: PySide6.QtWidgets.QLayout) -> PySide6.QtWidgets.QFormLayout.TakeRowResult: ...
    # @overload
    # def takeRow(self, row: int) -> PySide6.QtWidgets.QFormLayout.TakeRowResult: ...
    # @overload
    # def takeRow(self, widget: PySide6.QtWidgets.QWidget) -> PySide6.QtWidgets.QFormLayout.TakeRowResult: ...
    # def verticalSpacing(self) -> int: ...


class QGroupBox:
    """_summary_

    Args:
        PySide6 (_type_): _description_
    """

    ...
    # clicked                  : ClassVar[Signal] = ... # clicked()
    # toggled                  : ClassVar[Signal] = ... # toggled(bool)

    # @overload
    # def __init__(self, parent: Optional[PySide6.QtWidgets.QWidget] = ...) -> None: ...
    # @overload
    # def __init__(self, title: str, parent: Optional[PySide6.QtWidgets.QWidget] = ...) -> None: ...

    # def alignment(self) -> PySide6.QtCore.Qt.AlignmentFlag: ...
    # def changeEvent(self, event: PySide6.QtCore.QEvent) -> None: ...
    # def childEvent(self, event: PySide6.QtCore.QChildEvent) -> None: ...
    # def event(self, event: PySide6.QtCore.QEvent) -> bool: ...
    # def focusInEvent(self, event: PySide6.QtGui.QFocusEvent) -> None: ...
    # def initStyleOption(self, option: PySide6.QtWidgets.QStyleOptionGroupBox) -> None: ...
    # def isCheckable(self) -> bool: ...
    # def isChecked(self) -> bool: ...
    # def isFlat(self) -> bool: ...
    # def minimumSizeHint(self) -> PySide6.QtCore.QSize: ...
    # def mouseMoveEvent(self, event: PySide6.QtGui.QMouseEvent) -> None: ...
    # def mousePressEvent(self, event: PySide6.QtGui.QMouseEvent) -> None: ...
    # def mouseReleaseEvent(self, event: PySide6.QtGui.QMouseEvent) -> None: ...
    # def paintEvent(self, event: PySide6.QtGui.QPaintEvent) -> None: ...
    # def resizeEvent(self, event: PySide6.QtGui.QResizeEvent) -> None: ...
    # def setAlignment(self, alignment: int) -> None: ...
    # def setCheckable(self, checkable: bool) -> None: ...
    # def setChecked(self, checked: bool) -> None: ...
    # def setFlat(self, flat: bool) -> None: ...
    # def setTitle(self, title: str) -> None: ...
    # def title(self) -> str: ...


class QTextEdit:
    """_summary_

    Args:
        PySide6 (_type_): _description_
    """

    copyAvailable: ClassVar[Signal] = ...  # copyAvailable(bool)
    currentCharFormatChanged: ClassVar[Signal] = (
        ...
    )  # currentCharFormatChanged(QTextCharFormat)
    cursorPositionChanged: ClassVar[Signal] = ...  # cursorPositionChanged()
    redoAvailable: ClassVar[Signal] = ...  # redoAvailable(bool)
    selectionChanged: ClassVar[Signal] = ...  # selectionChanged()
    textChanged: ClassVar[Signal] = ...  # textChanged()
    undoAvailable: ClassVar[Signal] = ...  # undoAvailable(bool)

    class AutoFormattingFlag(enum.Flag):

        AutoAll: QTextEdit.AutoFormattingFlag = ...  # -0x1
        AutoNone: QTextEdit.AutoFormattingFlag = ...  # 0x0
        AutoBulletList: QTextEdit.AutoFormattingFlag = ...  # 0x1

    class ExtraSelection(Shiboken.Object):
        @overload
        def __init__(self) -> None: ...
        @overload
        def __init__(
            self, ExtraSelection: PySide6.QtWidgets.QTextEdit.ExtraSelection
        ) -> None: ...
        @staticmethod
        def __copy__() -> None: ...

    class LineWrapMode(enum.Enum):

        NoWrap: QTextEdit.LineWrapMode = ...  # 0x0
        WidgetWidth: QTextEdit.LineWrapMode = ...  # 0x1
        FixedPixelWidth: QTextEdit.LineWrapMode = ...  # 0x2
        FixedColumnWidth: QTextEdit.LineWrapMode = ...  # 0x3

    @overload
    def __init__(self, parent: Optional[PySide6.QtWidgets.QWidget] = ...) -> None: ...
    @overload
    def __init__(
        self, text: str, parent: Optional[PySide6.QtWidgets.QWidget] = ...
    ) -> None: ...
    def acceptRichText(self) -> bool: ...
    def alignment(self) -> PySide6.QtCore.Qt.AlignmentFlag: ...
    def anchorAt(self, pos: PySide6.QtCore.QPoint) -> str: ...
    def append(self, text: str) -> None: ...
    def autoFormatting(self) -> PySide6.QtWidgets.QTextEdit.AutoFormattingFlag: ...
    def canInsertFromMimeData(self, source: PySide6.QtCore.QMimeData) -> bool: ...
    def canPaste(self) -> bool: ...
    def changeEvent(self, e: PySide6.QtCore.QEvent) -> None: ...
    def clear(self) -> None: ...
    def contextMenuEvent(self, e: PySide6.QtGui.QContextMenuEvent) -> None: ...
    def copy(self) -> None: ...
    def createMimeDataFromSelection(self) -> PySide6.QtCore.QMimeData: ...
    @overload
    def createStandardContextMenu(self) -> PySide6.QtWidgets.QMenu: ...
    @overload
    def createStandardContextMenu(
        self, position: PySide6.QtCore.QPoint
    ) -> PySide6.QtWidgets.QMenu: ...
    def currentCharFormat(self) -> PySide6.QtGui.QTextCharFormat: ...
    def currentFont(self) -> PySide6.QtGui.QFont: ...
    def cursorForPosition(
        self, pos: PySide6.QtCore.QPoint
    ) -> PySide6.QtGui.QTextCursor: ...
    @overload
    def cursorRect(self) -> PySide6.QtCore.QRect: ...
    @overload
    def cursorRect(self, cursor: PySide6.QtGui.QTextCursor) -> PySide6.QtCore.QRect: ...
    def cursorWidth(self) -> int: ...
    def cut(self) -> None: ...
    def doSetTextCursor(self, cursor: PySide6.QtGui.QTextCursor) -> None: ...
    def document(self) -> PySide6.QtGui.QTextDocument: ...
    def documentTitle(self) -> str: ...
    def dragEnterEvent(self, e: PySide6.QtGui.QDragEnterEvent) -> None: ...
    def dragLeaveEvent(self, e: PySide6.QtGui.QDragLeaveEvent) -> None: ...
    def dragMoveEvent(self, e: PySide6.QtGui.QDragMoveEvent) -> None: ...
    def dropEvent(self, e: PySide6.QtGui.QDropEvent) -> None: ...
    def ensureCursorVisible(self) -> None: ...
    def event(self, e: PySide6.QtCore.QEvent) -> bool: ...
    def extraSelections(self) -> List[PySide6.QtWidgets.QTextEdit.ExtraSelection]: ...
    @overload
    def find(
        self, exp: str, options: PySide6.QtGui.QTextDocument.FindFlag = ...
    ) -> bool: ...
    @overload
    def find(
        self,
        exp: Union[PySide6.QtCore.QRegularExpression, str],
        options: PySide6.QtGui.QTextDocument.FindFlag = ...,
    ) -> bool: ...
    def focusInEvent(self, e: PySide6.QtGui.QFocusEvent) -> None: ...
    def focusNextPrevChild(self, next: bool) -> bool: ...
    def focusOutEvent(self, e: PySide6.QtGui.QFocusEvent) -> None: ...
    def fontFamily(self) -> str: ...
    def fontItalic(self) -> bool: ...
    def fontPointSize(self) -> float: ...
    def fontUnderline(self) -> bool: ...
    def fontWeight(self) -> int: ...
    def inputMethodEvent(self, arg__1: PySide6.QtGui.QInputMethodEvent) -> None: ...
    @overload
    def inputMethodQuery(self, property: PySide6.QtCore.Qt.InputMethodQuery) -> Any: ...
    @overload
    def inputMethodQuery(
        self, query: PySide6.QtCore.Qt.InputMethodQuery, argument: Any
    ) -> Any: ...
    def insertFromMimeData(self, source: PySide6.QtCore.QMimeData) -> None: ...
    def insertHtml(self, text: str) -> None: ...
    def insertPlainText(self, text: str) -> None: ...
    def isReadOnly(self) -> bool: ...
    def isUndoRedoEnabled(self) -> bool: ...
    def keyPressEvent(self, e: PySide6.QtGui.QKeyEvent) -> None: ...
    def keyReleaseEvent(self, e: PySide6.QtGui.QKeyEvent) -> None: ...
    def lineWrapColumnOrWidth(self) -> int: ...
    def lineWrapMode(self) -> PySide6.QtWidgets.QTextEdit.LineWrapMode: ...
    def loadResource(self, type: int, name: Union[PySide6.QtCore.QUrl, str]) -> Any: ...
    def mergeCurrentCharFormat(
        self, modifier: PySide6.QtGui.QTextCharFormat
    ) -> None: ...
    def mouseDoubleClickEvent(self, e: PySide6.QtGui.QMouseEvent) -> None: ...
    def mouseMoveEvent(self, e: PySide6.QtGui.QMouseEvent) -> None: ...
    def mousePressEvent(self, e: PySide6.QtGui.QMouseEvent) -> None: ...
    def mouseReleaseEvent(self, e: PySide6.QtGui.QMouseEvent) -> None: ...
    def moveCursor(
        self,
        operation: PySide6.QtGui.QTextCursor.MoveOperation,
        mode: PySide6.QtGui.QTextCursor.MoveMode = ...,
    ) -> None: ...
    def overwriteMode(self) -> bool: ...
    def paintEvent(self, e: PySide6.QtGui.QPaintEvent) -> None: ...
    def paste(self) -> None: ...
    def placeholderText(self) -> str: ...
    def print_(self, printer: PySide6.QtGui.QPagedPaintDevice) -> None: ...
    def redo(self) -> None: ...
    def resizeEvent(self, e: PySide6.QtGui.QResizeEvent) -> None: ...
    def scrollContentsBy(self, dx: int, dy: int) -> None: ...
    def scrollToAnchor(self, name: str) -> None: ...
    def selectAll(self) -> None: ...
    def setAcceptRichText(self, accept: bool) -> None: ...
    def setAlignment(self, a: PySide6.QtCore.Qt.AlignmentFlag) -> None: ...
    def setAutoFormatting(
        self, features: PySide6.QtWidgets.QTextEdit.AutoFormattingFlag
    ) -> None: ...
    def setCurrentCharFormat(self, format: PySide6.QtGui.QTextCharFormat) -> None: ...
    def setCurrentFont(
        self, f: Union[PySide6.QtGui.QFont, str, Sequence[str]]
    ) -> None: ...
    def setCursorWidth(self, width: int) -> None: ...
    def setDocument(self, document: PySide6.QtGui.QTextDocument) -> None: ...
    def setDocumentTitle(self, title: str) -> None: ...
    def setExtraSelections(
        self, selections: Sequence[PySide6.QtWidgets.QTextEdit.ExtraSelection]
    ) -> None: ...
    def setFontFamily(self, fontFamily: str) -> None: ...
    def setFontItalic(self, b: bool) -> None: ...
    def setFontPointSize(self, s: float) -> None: ...
    def setFontUnderline(self, b: bool) -> None: ...
    def setFontWeight(self, w: int) -> None: ...
    def setHtml(self, text: str) -> None: ...
    def setLineWrapColumnOrWidth(self, w: int) -> None: ...
    def setLineWrapMode(
        self, mode: PySide6.QtWidgets.QTextEdit.LineWrapMode
    ) -> None: ...
    def setMarkdown(self, markdown: str) -> None: ...
    def setOverwriteMode(self, overwrite: bool) -> None: ...
    def setPlaceholderText(self, placeholderText: str) -> None: ...
    def setPlainText(self, text: str) -> None: ...
    def setReadOnly(self, ro: bool) -> None: ...
    def setTabChangesFocus(self, b: bool) -> None: ...
    def setTabStopDistance(self, distance: float) -> None: ...
    def setText(self, text: str) -> None: ...
    def setTextBackgroundColor(
        self,
        c: Union[
            PySide6.QtGui.QColor,
            PySide6.QtGui.QRgba64,
            Any,
            PySide6.QtCore.Qt.GlobalColor,
            str,
            int,
        ],
    ) -> None: ...
    def setTextColor(
        self,
        c: Union[
            PySide6.QtGui.QColor,
            PySide6.QtGui.QRgba64,
            Any,
            PySide6.QtCore.Qt.GlobalColor,
            str,
            int,
        ],
    ) -> None: ...
    def setTextCursor(self, cursor: PySide6.QtGui.QTextCursor) -> None: ...
    def setTextInteractionFlags(
        self, flags: PySide6.QtCore.Qt.TextInteractionFlag
    ) -> None: ...
    def setUndoRedoEnabled(self, enable: bool) -> None: ...
    def setWordWrapMode(self, policy: PySide6.QtGui.QTextOption.WrapMode) -> None: ...
    def showEvent(self, arg__1: PySide6.QtGui.QShowEvent) -> None: ...
    def tabChangesFocus(self) -> bool: ...
    def tabStopDistance(self) -> float: ...
    def textBackgroundColor(self) -> PySide6.QtGui.QColor: ...
    def textColor(self) -> PySide6.QtGui.QColor: ...
    def textCursor(self) -> PySide6.QtGui.QTextCursor: ...
    def textInteractionFlags(self) -> PySide6.QtCore.Qt.TextInteractionFlag: ...
    def timerEvent(self, e: PySide6.QtCore.QTimerEvent) -> None: ...
    def toHtml(self) -> str: ...
    def toMarkdown(
        self, features: PySide6.QtGui.QTextDocument.MarkdownFeature = ...
    ) -> str: ...
    def toPlainText(self) -> str: ...
    def undo(self) -> None: ...
    def wheelEvent(self, e: PySide6.QtGui.QWheelEvent) -> None: ...
    def wordWrapMode(self) -> PySide6.QtGui.QTextOption.WrapMode: ...
    def zoomIn(self, range: int = ...) -> None: ...
    def zoomInF(self, range: float) -> None: ...
    def zoomOut(self, range: int = ...) -> None: ...


class QCheckBox:
    """
    <hr>
    ![](buttons/checkbox.png)

    A <code>QCheckBox</code> widget is a toggle button that can be checked or unchecked.
    Checkboxes are typically used to represent features in an application that
    can be enabled or disabled without affecting others. By default, a checkbox
    is unchecked.

    <hr>

    <h3>Signal</h3>
    <ul>
        <li><code>stateChanged</code>: Emitted whenever the checkbox's state changes.</li>
    </ul>

    <h3>Methods</h3>
    <ul>
        <li><a href="#code.QtWidgets.QCheckBox.IsChecked"><code>IsChecked</code></a></li>
        <li><a href="#code.QtWidgets.QCheckBox.setChecked"><code>setChecked</code></a></li>
    </ul>

    <br>


    **Examples**
        <hr>
        ``` py
        checkbox = QCheckBox()
        print(checkbox.IsChecked())
        ```
        ```False```
        ``` py
        checkbox.setChecked(True)
        print(checkbox.IsChecked())
        ```
        ```True```
        <hr>

    <br>
    """

    def IsChecked() -> bool:
        """
        Returns True if the checkbox is checked; otherwise returns False.

        Returns:
            True if the checkbox is checked; otherwise False.
        <br>
        """
        ...

    def setChecked(checked: bool):
        """
        Sets the checkbox to be checked if checked is True; otherwise sets it
        to be unchecked.

        Args:
            checked (bool): True to check the checkbox; otherwise False.
        <br>
        <br>
        """

    # stateChanged             : ClassVar[Signal] = ... # stateChanged(int)

    # @overload
    # def __init__(self, parent: Optional[PySide6.QtWidgets.QWidget] = ...) -> None: ...
    # @overload
    # def __init__(self, text: str, parent: Optional[PySide6.QtWidgets.QWidget] = ...) -> None: ...

    # def checkState(self) -> PySide6.QtCore.Qt.CheckState: ...
    # def checkStateSet(self) -> None: ...
    # def event(self, e: PySide6.QtCore.QEvent) -> bool: ...
    # def hitButton(self, pos: PySide6.QtCore.QPoint) -> bool: ...
    # def initStyleOption(self, option: PySide6.QtWidgets.QStyleOptionButton) -> None: ...
    # def isTristate(self) -> bool: ...
    # def minimumSizeHint(self) -> PySide6.QtCore.QSize: ...
    # def mouseMoveEvent(self, arg__1: PySide6.QtGui.QMouseEvent) -> None: ...
    # def nextCheckState(self) -> None: ...
    # def paintEvent(self, arg__1: PySide6.QtGui.QPaintEvent) -> None: ...
    # def setCheckState(self, state: PySide6.QtCore.Qt.CheckState) -> None: ...
    # def setTristate(self, y: bool = ...) -> None: ...
    # def sizeHint(self) -> PySide6.QtCore.QSize: ...


class QLabel:
    """
    <hr>
    ![](buttons/label.png)

    <code>QLabel</code> is used for displaying text or an image. No user interaction
    functionality is provided.

    <hr>


    <h3>Methods</h3>
    <ul>
        <li><a href="#code.QtWidgets.QLabel.setText"><code>setText</code></a></li>
        <li><a href="#code.QtWidgets.QLabel.text"><code>text</code></a></li>
    </ul>

    <br>



    **Examples**
        <hr>
        ``` py
        label = QLabel()
        label.setText("Hello World!")
        print(label.text())
        ```
        ```'Hello World!'```
        <hr>

    <br>
    """

    # linkActivated            : ClassVar[Signal] = ... # linkActivated(QString)
    # linkHovered              : ClassVar[Signal] = ... # linkHovered(QString)

    # @overload
    # def __init__(self, parent: Optional[PySide6.QtWidgets.QWidget] = ..., f: PySide6.QtCore.Qt.WindowType = ...) -> None: ...
    # @overload
    # def __init__(self, text: str, parent: Optional[PySide6.QtWidgets.QWidget] = ..., f: PySide6.QtCore.Qt.WindowType = ...) -> None: ...

    # def alignment(self) -> PySide6.QtCore.Qt.AlignmentFlag: ...
    # def buddy(self) -> PySide6.QtWidgets.QWidget: ...
    # def changeEvent(self, arg__1: PySide6.QtCore.QEvent) -> None: ...
    # def clear(self) -> None: ...
    # def contextMenuEvent(self, ev: PySide6.QtGui.QContextMenuEvent) -> None: ...
    # def event(self, e: PySide6.QtCore.QEvent) -> bool: ...
    # def focusInEvent(self, ev: PySide6.QtGui.QFocusEvent) -> None: ...
    # def focusNextPrevChild(self, next: bool) -> bool: ...
    # def focusOutEvent(self, ev: PySide6.QtGui.QFocusEvent) -> None: ...
    # def hasScaledContents(self) -> bool: ...
    # def hasSelectedText(self) -> bool: ...
    # def heightForWidth(self, arg__1: int) -> int: ...
    # def indent(self) -> int: ...
    # def keyPressEvent(self, ev: PySide6.QtGui.QKeyEvent) -> None: ...
    # def margin(self) -> int: ...
    # def minimumSizeHint(self) -> PySide6.QtCore.QSize: ...
    # def mouseMoveEvent(self, ev: PySide6.QtGui.QMouseEvent) -> None: ...
    # def mousePressEvent(self, ev: PySide6.QtGui.QMouseEvent) -> None: ...
    # def mouseReleaseEvent(self, ev: PySide6.QtGui.QMouseEvent) -> None: ...
    # def movie(self) -> PySide6.QtGui.QMovie: ...
    # def openExternalLinks(self) -> bool: ...
    # def paintEvent(self, arg__1: PySide6.QtGui.QPaintEvent) -> None: ...
    # def picture(self) -> PySide6.QtGui.QPicture: ...
    # def pixmap(self) -> PySide6.QtGui.QPixmap: ...
    # def selectedText(self) -> str: ...
    # def selectionStart(self) -> int: ...
    # def setAlignment(self, arg__1: PySide6.QtCore.Qt.AlignmentFlag) -> None: ...
    # def setBuddy(self, arg__1: PySide6.QtWidgets.QWidget) -> None: ...
    # def setIndent(self, arg__1: int) -> None: ...
    # def setMargin(self, arg__1: int) -> None: ...
    # def setMovie(self, movie: PySide6.QtGui.QMovie) -> None: ...
    # @overload
    # def setNum(self, arg__1: float) -> None: ...
    # @overload
    # def setNum(self, arg__1: int) -> None: ...
    # def setOpenExternalLinks(self, open: bool) -> None: ...
    # def setPicture(self, arg__1: Union[PySide6.QtGui.QPicture, int]) -> None: ...
    # def setPixmap(self, arg__1: Union[PySide6.QtGui.QPixmap, PySide6.QtGui.QImage, str]) -> None: ...
    # def setScaledContents(self, arg__1: bool) -> None: ...
    # def setSelection(self, arg__1: int, arg__2: int) -> None: ...
    def setText(self, text: str) -> None:
        """
        Sets the label's text to the given text.

        Args:
            text (str): The text to set.
        <br>
        """

    # def setTextFormat(self, arg__1: PySide6.QtCore.Qt.TextFormat) -> None: ...
    # def setTextInteractionFlags(self, flags: PySide6.QtCore.Qt.TextInteractionFlag) -> None: ...
    # def setWordWrap(self, on: bool) -> None: ...
    # def sizeHint(self) -> PySide6.QtCore.QSize: ...
    def text(self) -> str:
        """
        Returns the label's text.

        Returns:
            The label's text.
        <br>
        <br>
        """

    # def textFormat(self) -> PySide6.QtCore.Qt.TextFormat: ...
    # def textInteractionFlags(self) -> PySide6.QtCore.Qt.TextInteractionFlag: ...
    # def wordWrap(self) -> bool: ...


class QComboBox:
    """
    <hr>
    ![](buttons/combobox.png)

    A <code>QComboBox</code> is a button that provides a list of options to the user when clicked.
    The user can select an option from the list. The selected option is displayed
    in the combo box.

    <hr>

    <h3>Signals</h3>
    <ul>
        <li><code>currentIndexChanged</code>: Emitted when the current index changes.</li>
    </ul>

    <h3>Methods</h3>
    <ul>
        <li><a href="#code.QtWidgets.QComboBox.addItem"><code>addItem</code></a></li>
        <li><a href="#code.QtWidgets.QComboBox.addItems"><code>addItems</code></a></li>
        <li><a href="#code.QtWidgets.QComboBox.clear"><code>clear</code></a></li>
        <li><a href="#code.QtWidgets.QComboBox.currentIndex"><code>currentIndex</code></a></li>
        <li><a href="#code.QtWidgets.QComboBox.currentText"><code>currentText</code></a></li>
        <li><a href="#code.QtWidgets.QComboBox.removeItem"><code>removeItem</code></a></li>
        <li><a href="#code.QtWidgets.QComboBox.setCurrentIndex"><code>setCurrentIndex</code></a></li>
        <li><a href="#code.QtWidgets.QComboBox.setCurrentText"><code>setCurrentText</code></a></li>
    </ul>

    <br>


    **Examples**
        <hr>
        ``` py
        combo = QComboBox()
        combo.addItem("Option 1")
        combo.addItems("[Option 2, Option 3]")
        print(combo.currentText())
        ```
        ```'Option 1'```
        ``` py
        print(combo.currentIndex())
        ```
        ```'0'```
        ``` py
        combo.setCurrentIndex(2)
        print(combo.currentText())
        ```
        ```'Option 3'```
        ``` py
        combo.clear()
        print(combo.currentText())
        ```
        ```''```
        ``` py
        print(combo.currentIndex())
        ```
        ```'-1'```
        <hr>
    <br>
    """

    # activated                : ClassVar[Signal] = ... # activated(int)
    currentIndexChanged: ClassVar[Signal] = ...  # currentIndexChanged(int)
    # currentTextChanged       : ClassVar[Signal] = ... # currentTextChanged(QString)
    # editTextChanged          : ClassVar[Signal] = ... # editTextChanged(QString)
    # highlighted              : ClassVar[Signal] = ... # highlighted(int)
    # textActivated            : ClassVar[Signal] = ... # textActivated(QString)
    # textHighlighted          : ClassVar[Signal] = ... # textHighlighted(QString)

    # class InsertPolicy(enum.Enum):

    #     NoInsert: QComboBox.InsertPolicy = ...  # 0x0
    #     InsertAtTop: QComboBox.InsertPolicy = ...  # 0x1
    #     InsertAtCurrent: QComboBox.InsertPolicy = ...  # 0x2
    #     InsertAtBottom: QComboBox.InsertPolicy = ...  # 0x3
    #     InsertAfterCurrent: QComboBox.InsertPolicy = ...  # 0x4
    #     InsertBeforeCurrent: QComboBox.InsertPolicy = ...  # 0x5
    #     InsertAlphabetically: QComboBox.InsertPolicy = ...  # 0x6

    # class SizeAdjustPolicy(enum.Enum):

    #     AdjustToContents: QComboBox.SizeAdjustPolicy = ...  # 0x0
    #     AdjustToContentsOnFirstShow: QComboBox.SizeAdjustPolicy = ...  # 0x1
    #     AdjustToMinimumContentsLengthWithIcon: QComboBox.SizeAdjustPolicy = ...  # 0x2

    # def __init__(self, parent: Optional[PySide6.QtWidgets.QWidget] = ...) -> None: ...

    # @overload
    # def addItem(self,icon: Union[PySide6.QtGui.QIcon, PySide6.QtGui.QPixmap], text: str, userData: Any = ...,) -> None: ...
    # @overload
    def addItem(self, text: str) -> None:
        """
        Adds an item to the combo box with the given text.

        Args:
            text (str): The text to display in the combo box.
        <br>
        """

    def addItems(self, texts: Sequence[str]) -> None:
        """
        Adds the items in the list texts to the combo box.

        Args:
            texts (Sequence[str]): The list of strings to add to the combo box.
        <br>
        """

    # def changeEvent(self, e: PySide6.QtCore.QEvent) -> None: ...
    def clear(self) -> None:
        """
        Clears the contents of the combo box, removing all items.

        <br>
        """

    # def clearEditText(self) -> None: ...
    # def completer(self) -> PySide6.QtWidgets.QCompleter: ...
    # def contextMenuEvent(self, e: PySide6.QtGui.QContextMenuEvent) -> None: ...
    # def count(self) -> int: ...
    # def currentData(self, role: int = ...) -> Any: ...
    def currentIndex(self) -> int:
        """
        Gets the index of the currently selected item in the combo box. For
        an empty combo box, returns -1. The current index can change when inserting
        or removing items.

        Returns:
            The index of the currently selected item.
        <br>
        """

    def currentText(self) -> str:
        """
        Gets the text of the currently selected item in the combo box. For an
        empty combo box, returns an empty string.

        Returns:
            The text of the currently selected item.
        <br>
        """

    # def duplicatesEnabled(self) -> bool: ...
    # def event(self, event: PySide6.QtCore.QEvent) -> bool: ...
    # def findData(self, data: Any, role: int = ..., flags: PySide6.QtCore.Qt.MatchFlag = ...) -> int: ...
    # def findText(self, text: str, flags: PySide6.QtCore.Qt.MatchFlag = ...) -> int: ...
    # def focusInEvent(self, e: PySide6.QtGui.QFocusEvent) -> None: ...
    # def focusOutEvent(self, e: PySide6.QtGui.QFocusEvent) -> None: ...
    # def hasFrame(self) -> bool: ...
    # def hideEvent(self, e: PySide6.QtGui.QHideEvent) -> None: ...
    # def hidePopup(self) -> None: ...
    # def iconSize(self) -> PySide6.QtCore.QSize: ...
    # def initStyleOption(self, option: PySide6.QtWidgets.QStyleOptionComboBox) -> None: ...
    # def inputMethodEvent(self, arg__1: PySide6.QtGui.QInputMethodEvent) -> None: ...
    # @overload
    # def inputMethodQuery(self, arg__1: PySide6.QtCore.Qt.InputMethodQuery) -> Any: ...
    # @overload
    # def inputMethodQuery(self, query: PySide6.QtCore.Qt.InputMethodQuery, argument: Any) -> Any: ...
    # @overload
    # def insertItem(self, index: int, icon: Union[PySide6.QtGui.QIcon, PySide6.QtGui.QPixmap], text: str, userData: Any = ...) -> None: ...
    # @overload
    # def insertItem(self, index: int, text: str, userData: Any = ...) -> None: ...
    # def insertItems(self, index: int, texts: Sequence[str]) -> None: ...
    # def insertPolicy(self) -> PySide6.QtWidgets.QComboBox.InsertPolicy: ...
    # def insertSeparator(self, index: int) -> None: ...
    # def isEditable(self) -> bool: ...
    # def itemData(self, index: int, role: int = ...) -> Any: ...
    # def itemDelegate(self) -> PySide6.QtWidgets.QAbstractItemDelegate: ...
    # def itemIcon(self, index: int) -> PySide6.QtGui.QIcon: ...
    # def itemText(self, index: int) -> str: ...
    # def keyPressEvent(self, e: PySide6.QtGui.QKeyEvent) -> None: ...
    # def keyReleaseEvent(self, e: PySide6.QtGui.QKeyEvent) -> None: ...
    # def lineEdit(self) -> PySide6.QtWidgets.QLineEdit: ...
    # def maxCount(self) -> int: ...
    # def maxVisibleItems(self) -> int: ...
    # def minimumContentsLength(self) -> int: ...
    # def minimumSizeHint(self) -> PySide6.QtCore.QSize: ...
    # def model(self) -> PySide6.QtCore.QAbstractItemModel: ...
    # def modelColumn(self) -> int: ...
    # def mousePressEvent(self, e: PySide6.QtGui.QMouseEvent) -> None: ...
    # def mouseReleaseEvent(self, e: PySide6.QtGui.QMouseEvent) -> None: ...
    # def paintEvent(self, e: PySide6.QtGui.QPaintEvent) -> None: ...
    # def placeholderText(self) -> str: ...
    def removeItem(self, index: int) -> None:
        """
        Removes the item at the given index from the combo box.

        Args:
            index (int): The index of the item to remove.
        <br>
        """

    # def resizeEvent(self, e: PySide6.QtGui.QResizeEvent) -> None: ...
    # def rootModelIndex(self) -> PySide6.QtCore.QModelIndex: ...
    # def setCompleter(self, c: PySide6.QtWidgets.QCompleter) -> None: ...
    def setCurrentIndex(self, index: int) -> None:
        """
        Sets the current index of the combo box to the given index.

        Args:
            index (int): The index of the item to set as the current item.
        <br>
        """

    def setCurrentText(self, text: str) -> None:
        """
        Sets the current text of the combo box to the given text.

        Args:
            text (str): The text to set as the current text.
        <br>
        <br>
        """

    # def setText(): ...

    # def setDuplicatesEnabled(self, enable: bool) -> None: ...
    # def setEditText(self, text: str) -> None: ...
    # def setEditable(self, editable: bool) -> None: ...
    # def setFrame(self, arg__1: bool) -> None: ...
    # def setIconSize(self, size: PySide6.QtCore.QSize) -> None: ...
    # def setInsertPolicy(self, policy: PySide6.QtWidgets.QComboBox.InsertPolicy) -> None: ...
    # def setItemData(self, index: int, value: Any, role: int = ...) -> None: ...
    # def setItemDelegate(self, delegate: PySide6.QtWidgets.QAbstractItemDelegate) -> None: ...
    # def setItemIcon(self, index: int, icon: Union[PySide6.QtGui.QIcon, PySide6.QtGui.QPixmap]) -> None: ...
    # def setItemText(self, index: int, text: str) -> None: ...
    # def setLineEdit(self, edit: PySide6.QtWidgets.QLineEdit) -> None: ...
    # def setMaxCount(self, max: int) -> None: ...
    # def setMaxVisibleItems(self, maxItems: int) -> None: ...
    # def setMinimumContentsLength(self, characters: int) -> None: ...
    # def setModel(self, model: PySide6.QtCore.QAbstractItemModel) -> None: ...
    # def setModelColumn(self, visibleColumn: int) -> None: ...
    # def setPlaceholderText(self, placeholderText: str) -> None: ...
    # def setRootModelIndex(self, index: Union[PySide6.QtCore.QModelIndex, PySide6.QtCore.QPersistentModelIndex]) -> None: ...
    # def setSizeAdjustPolicy(self, policy: PySide6.QtWidgets.QComboBox.SizeAdjustPolicy) -> None: ...
    # def setValidator(self, v: PySide6.QtGui.QValidator) -> None: ...
    # def setView(self, itemView: PySide6.QtWidgets.QAbstractItemView) -> None: ...
    # def showEvent(self, e: PySide6.QtGui.QShowEvent) -> None: ...
    # def showPopup(self) -> None: ...
    # def sizeAdjustPolicy(self) -> PySide6.QtWidgets.QComboBox.SizeAdjustPolicy: ...
    # def sizeHint(self) -> PySide6.QtCore.QSize: ...
    # def validator(self) -> PySide6.QtGui.QValidator: ...
    # def view(self) -> PySide6.QtWidgets.QAbstractItemView: ...
    # def wheelEvent(self, e: PySide6.QtGui.QWheelEvent) -> None: ...


class QSpinBox:
    """
    <hr>
    ![](buttons/spinbox.png)

    <code>QSpinBox</code> is designed to handle integers and discrete sets of values. Use
    <a href="../QDoubleSpinBox"><code>QDoubleSpinBox</code></a> for floating point values.
    <code>QSpinBox</code> allows the user to choose a value by clicking the up and down buttons
    to increment or decrement the value displayed. The value can also be changed by typing
    in a value. The range of valid values and the number of decimal places shown is configurable.

    <hr>

    <h3>Signals</h3>
    <ul>
        <li><code>valueChanged</code>: Emitted when the value in the spin box changes.</li>
    </ul>

    <h3>Methods</h3>
    <ul>
        <li><a href="#code.QtWidgets.QSpinBox.setMaximum"><code>setMaximum</code></a></li>
        <li><a href="#code.QtWidgets.QSpinBox.setMinimum"><code>setMinimum</code></a></li>
        <li><a href="#code.QtWidgets.QSpinBox.setSingleStep"><code>setSingleStep</code></a></li>
        <li><a href="#code.QtWidgets.QSpinBox.setValue"><code>setValue</code></a></li>
        <li><a href="#code.QtWidgets.QSpinBox.value"><code>value</code></a></li>
    </ul>

    <br>

    **Examples**
        <hr>
        ``` py
        spin_box = QSpinBox()
        spin_box.setMaximum(100)
        spin_box.setMinimum(0)
        spin_box.setSingleStep(5)
        spin_box.setValue(50)
        print(spin_box.value())
        ```
        ```50```
        ``` py
        spin_box.setValue(200)
        print(spin_box.value())
        ```
        ```100```
        <hr>

    <br>
    """

    textChanged: ClassVar[Signal] = ...  # textChanged(QString)
    valueChanged: ClassVar[Signal] = ...  # valueChanged(int)

    # def __init__(self, parent: Optional[PySide6.QtWidgets.QWidget] = ...) -> None: ...

    # def cleanText(self) -> str: ...
    # def displayIntegerBase(self) -> int: ...
    # def event(self, event: PySide6.QtCore.QEvent) -> bool: ...
    # def fixup(self, str: str) -> str: ...
    # def maximum(self) -> int: ...
    # def minimum(self) -> int: ...
    # def prefix(self) -> str: ...
    # def setDisplayIntegerBase(self, base: int) -> None: ...

    def setMaximum(self, max: int) -> None:
        """
        Sets the maximum value of the spin box. The default maximum value is 99.

        Args:
            max (int): The maximum value of the spin box.
        <br>
        """

    def setMinimum(self, min: int) -> None:
        """
        Sets the minimum value of the spin box. The default minimum value
        is 0.

        Args:
            min (int): The minimum value of the spin box.
        <br>
        """

    # def setPrefix(self, prefix: str) -> None: ...
    # def setRange(self, min: int, max: int) -> None: ...

    def setSingleStep(self, val: int) -> None:
        """
        Sets the value that the spin box will increment or decrement by when the
        up or down buttons are clicked. The default step value is 1. Setting a
        value less than 0 does nothing.

        Args:
            val (int): The value to increment or decrement by.
        <br>
        """

    # def setStepType(self, stepType: PySide6.QtWidgets.QAbstractSpinBox.StepType) -> None: ...
    # def setSuffix(self, suffix: str) -> None: ...
    def setValue(self, val: int) -> None:
        """
        Sets the value of the spin box. If the value is outside the range of
        the spin box, the value is adjusted to the nearest limit.

        Args:
            val (int): The value to set the spin box to.
        <br>
        """

    # def singleStep(self) -> int: ...
    # def stepType(self) -> PySide6.QtWidgets.QAbstractSpinBox.StepType: ...
    # def suffix(self) -> str: ...
    # def textFromValue(self, val: int) -> str: ...
    # def validate(self, input: str, pos: int) -> object: ...
    def value(self) -> int:
        """
        Returns the current value of the spin box.

        Returns:
            The current value of the spin box.
        <br>
        <br>
        """

    # def valueFromText(self, text: str) -> int: ...


class QDoubleSpinBox:
    """
    <hr>
    ![](buttons/double_spinbox.png)

    <code>QDoubleSpinBox</code> is designed to handle double values. For integers, use
    <a href="../QSpinBox"><code>QSpinBox</code></a> instead. <code>QDoubleSpinBox</code>
    allows the user to choose a value by clicking the up and down buttons to
    increment or decrement the value displayed. The value can also be changed
    by typing in a value. The range of valid values and the number of decimal
    places shown is configurable.

    <hr>

    <h3>Signals</h3>
    <ul>
        <li><code>valueChanged</code>: Emitted when the value in the spin box changes.</li>
    </ul>


    <h3>Methods</h3>
    <ul>
        <li><a href="#code.QtWidgets.QDoubleSpinBox.setMaximum"><code>setMaximum</code></a></li>
        <li><a href="#code.QtWidgets.QDoubleSpinBox.setMinimum"><code>setMinimum</code></a></li>
        <li><a href="#code.QtWidgets.QDoubleSpinBox.setSingleStep"><code>setSingleStep</code></a></li>
        <li><a href="#code.QtWidgets.QDoubleSpinBox.setValue"><code>setValue</code></a></li>
        <li><a href="#code.QtWidgets.QDoubleSpinBox.value"><code>value</code></a></li>
    </ul>

    <br>

    **Examples**
        <hr>
        ``` py
        spin_box = QDoubleSpinBox()
        spin_box.setMaximum(100)
        spin_box.setMinimum(0)
        spin_box.setSingleStep(0.1)
        spin_box.setValue(50)
        print(spin_box.value())
        ```
        ```50.0```
        ``` py
        spin_box.setValue(200)
        print(spin_box.value())
        ```
        ```100.0```
        <hr>

    <br>
    """

    textChanged: ClassVar[Signal] = ...  # textChanged(QString)
    valueChanged: ClassVar[Signal] = ...  # valueChanged(double)

    # def __init__(self, parent: Optional[PySide6.QtWidgets.QWidget] = ...) -> None: ...

    # def cleanText(self) -> str: ...
    # def decimals(self) -> int: ...
    # def fixup(self, str: str) -> str: ...
    # def maximum(self) -> float: ...
    # def minimum(self) -> float: ...
    # def prefix(self) -> str: ...
    # def setDecimals(self, prec: int) -> None: ...
    def setMaximum(self, max: float) -> None:
        """
        Sets the maximum value of the spin box. The default maximum value
        is 99.99.

        Args:
            max: The new maximum value.
        <br>
        """

    def setMinimum(self, min: float) -> None:
        """
        Sets the minimum value of the spin box. The default minimum value
        is 0.0.

        Args:
            min: The new minimum value.
        <br>
        """

    # def setPrefix(self, prefix: str) -> None: ...
    # def setRange(self, min: float, max: float) -> None: ...
    def setSingleStep(self, val: float) -> None:
        """
        Sets the value that the spin box will increment or decrement by when the
        up or down buttons are clicked. The default step value is 1.0. Setting a
        singleStep value of less than 0 does nothing.

        Args:
            val: The new step value.
        <br>
        """

    # def setStepType(self, stepType: PySide6.QtWidgets.QAbstractSpinBox.StepType) -> None: ...
    # def setSuffix(self, suffix: str) -> None: ...
    def setValue(self, val: float) -> None:
        """
        Sets the value of the spin box. If the value is outside the range of the
        spin box, the value is adjusted to the nearest limit.

        Args:
            val: The new value.
        <br>
        """

    # def singleStep(self) -> float: ...
    # def stepType(self) -> PySide6.QtWidgets.QAbstractSpinBox.StepType: ...
    # def suffix(self) -> str: ...
    # def textFromValue(self, val: float) -> str: ...
    # def validate(self, input: str, pos: int) -> object: ...
    def value(self) -> float:
        """
        Returns the value of the spin box.

        Returns:
            The value of the spin box.
        <br>
        <br>
        """

    # def valueFromText(self, text: str) -> float: ...


class QPushButton:
    """
    <hr>
    ![](buttons/pushbutton.png)

    The push button, or command button, is perhaps the most commonly used widget
    in any graphical user interface. Push (click) a button to command the computer
    to perform some action, or to answer a question. Typical buttons are OK, Apply,
    Cancel, Close, Yes, No and Help.

    <hr>

    <h3>Signals</h3>
    <ul>
        <li><code>clicked</code>: Emitted when the button is clicked.</li>
    </ul>

    <h3>Methods</h3>
    <ul>
        <li><a href="#code.QtWidgets.QPushButton.text"><code>text</code></a></li>
        <li><a href="#code.QtWidgets.QPushButton.setText"><code>setText</code></a></li>
    </ul>

    <br>

    **Examples**
        <hr>
        ``` py
        button = QPushButton()
        button.setText("Click me!")
        print(button.text())
        ```
        ```'Click me!'```
        <hr>

    <br>
    """

    clicked: ClassVar[Signal] = ...  # clicked()

    def text(self) -> str:
        """
        Returns the text displayed in the button.

        Returns:
            The text displayed in the button.
        <br>
        """

    def setText(text: str) -> None:
        """
        Sets the text to be displayed in the button.

        Args:
            text (str): The text to display in the button.
        <br>
        <br>
        """

    # @overload
    # def __init__(self, icon: Union[PySide6.QtGui.QIcon, PySide6.QtGui.QPixmap], text: str, parent: Optional[PySide6.QtWidgets.QWidget] = ...) -> None: ...
    # @overload
    # def __init__(self, parent: Optional[PySide6.QtWidgets.QWidget] = ...) -> None: ...
    # @overload
    # def __init__(self, text: str, parent: Optional[PySide6.QtWidgets.QWidget] = ...) -> None: ...

    # def autoDefault(self) -> bool: ...
    # def event(self, e: PySide6.QtCore.QEvent) -> bool: ...
    # def focusInEvent(self, arg__1: PySide6.QtGui.QFocusEvent) -> None: ...
    # def focusOutEvent(self, arg__1: PySide6.QtGui.QFocusEvent) -> None: ...
    # def hitButton(self, pos: PySide6.QtCore.QPoint) -> bool: ...
    # def initStyleOption(self, option: PySide6.QtWidgets.QStyleOptionButton) -> None: ...
    # def isDefault(self) -> bool: ...
    # def isFlat(self) -> bool: ...
    # def keyPressEvent(self, arg__1: PySide6.QtGui.QKeyEvent) -> None: ...
    # def menu(self) -> PySide6.QtWidgets.QMenu: ...
    # def minimumSizeHint(self) -> PySide6.QtCore.QSize: ...
    # def mouseMoveEvent(self, arg__1: PySide6.QtGui.QMouseEvent) -> None: ...
    # def paintEvent(self, arg__1: PySide6.QtGui.QPaintEvent) -> None: ...
    # def setAutoDefault(self, arg__1: bool) -> None: ...
    # def setDefault(self, arg__1: bool) -> None: ...
    # def setFlat(self, arg__1: bool) -> None: ...
    # def setMenu(self, menu: PySide6.QtWidgets.QMenu) -> None: ...
    # def showMenu(self) -> None: ...
    # def sizeHint(self) -> PySide6.QtCore.QSize: ...
