{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Pyside6 Compact Documentation","text":"<p>This PySide6 documentation is compact, focused on beginners, and while not complete, it is clear and explanatory.  PySide6 is the official Python module from the Qt for Python project, which provides access to the complete Qt 6.0+ framework. </p> <p>For the full Pyside6 documentation, checkout the Qt for Python docs.</p> Getting started <ul> <li> Install Pyside6 </li> <li>  Tutorial </li> </ul> Documentation <ul> <li> API reference</li> </ul> <p> </p>"},{"location":"QtWidgets/","title":"Overview","text":"<p>In this API Reference we will cover relavant classes and functions which are part of the <code>QtWidgets</code> module. The <code>QtWidgets</code> module contains classes that provide a set of UI elements to create classic desktop-style graphical user interfaces. A list of all the classes in the <code>QtWidgets</code> module is given below.</p> <p><code>QtWidgets</code> module contains the following classes:  </p> <ul> <li><code>QMainWindow</code>: Provides a framework for building an application's user interface.</li> <li><code>QHBoxLayout</code>: Manages a horizontal layout of widgets. </li> <li><code>QVBoxLayout</code>: Manages a vertical layout of other widgets. </li> <li><code>QGroupBox</code>:</li> <li><code>QTextEdit</code>:</li> <li><code>QCheckBox</code>: A toggle button with a checkbox indicator.  </li> <li><code>QLabel</code>: A widget that displays text.</li> <li><code>QComboBox</code>: A widget that allows the user to choose from a list of options. </li> <li><code>QSpinBox</code>: A widget that allows the user to choose a number from a range.</li> <li><code>QDoubleSpinBox</code>: A widget that allows the user to choose a floating-point number from a range.</li> <li><code>QPushButton</code>: A push button that can be clicked by the user.</li> </ul> <p> </p>"},{"location":"QtWidgets/QCheckBox/","title":"QCheckBox","text":"<p>A <code>QCheckBox</code> widget is a toggle button that can be checked or unchecked. Checkboxes are typically used to represent features in an application that can be enabled or disabled without affecting others. By default, a checkbox is unchecked.</p> Signal <ul> <li><code>stateChanged</code>: Emitted whenever the checkbox's state changes.</li> </ul> Methods <ul> <li><code>IsChecked</code></li> <li><code>setChecked</code></li> </ul> <p></p> <p>Examples <pre><code>checkbox = QCheckBox()\nprint(checkbox.IsChecked())\n</code></pre> <code>False</code> <pre><code>checkbox.setChecked(True)\nprint(checkbox.IsChecked())\n</code></pre> <code>True</code> </p> <p></p>"},{"location":"QtWidgets/QCheckBox/#QtWidgets.QCheckBox.IsChecked","title":"<code>IsChecked()</code>","text":"<p>Returns True if the checkbox is checked; otherwise returns False.</p> <p>Returns:</p> Type Description <code>bool</code> <p>True if the checkbox is checked; otherwise False.</p> <p></p>"},{"location":"QtWidgets/QCheckBox/#QtWidgets.QCheckBox.setChecked","title":"<code>setChecked(checked)</code>","text":"<p>Sets the checkbox to be checked if checked is True; otherwise sets it to be unchecked.</p> <p>Parameters:</p> Name Type Description Default <code>checked</code> <code>bool</code> <p>True to check the checkbox; otherwise False.</p> required <p> </p>"},{"location":"QtWidgets/QComboBox/","title":"QComboBox","text":"<p>A <code>QComboBox</code> is a button that provides a list of options to the user when clicked. The user can select an option from the list. The selected option is displayed in the combo box.</p> Signals <ul> <li><code>currentIndexChanged</code>: Emitted when the current index changes.</li> </ul> Methods <ul> <li><code>addItem</code></li> <li><code>addItems</code></li> <li><code>clear</code></li> <li><code>currentIndex</code></li> <li><code>currentText</code></li> <li><code>removeItem</code></li> <li><code>setCurrentIndex</code></li> <li><code>setCurrentText</code></li> </ul> <p></p> <p>Examples <pre><code>combo = QComboBox()\ncombo.addItem(\"Option 1\")\ncombo.addItems(\"[Option 2, Option 3]\")\nprint(combo.currentText())\n</code></pre> <code>'Option 1'</code> <pre><code>print(combo.currentIndex())\n</code></pre> <code>'0'</code> <pre><code>combo.setCurrentIndex(2)\nprint(combo.currentText())\n</code></pre> <code>'Option 3'</code> <pre><code>combo.clear()\nprint(combo.currentText())\n</code></pre> <code>''</code> <pre><code>print(combo.currentIndex())\n</code></pre> <code>'-1'</code> </p>"},{"location":"QtWidgets/QComboBox/#QtWidgets.QComboBox.addItem","title":"<code>addItem(text)</code>","text":"<p>Adds an item to the combo box with the given text.</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>The text to display in the combo box.</p> required <p></p>"},{"location":"QtWidgets/QComboBox/#QtWidgets.QComboBox.addItems","title":"<code>addItems(texts)</code>","text":"<p>Adds the items in the list texts to the combo box.</p> <p>Parameters:</p> Name Type Description Default <code>texts</code> <code>Sequence[str]</code> <p>The list of strings to add to the combo box.</p> required <p></p>"},{"location":"QtWidgets/QComboBox/#QtWidgets.QComboBox.clear","title":"<code>clear()</code>","text":"<p>Clears the contents of the combo box, removing all items.</p> <p></p>"},{"location":"QtWidgets/QComboBox/#QtWidgets.QComboBox.currentIndex","title":"<code>currentIndex()</code>","text":"<p>Gets the index of the currently selected item in the combo box. For an empty combo box, returns -1. The current index can change when inserting or removing items.</p> <p>Returns:</p> Type Description <code>int</code> <p>The index of the currently selected item.</p> <p></p>"},{"location":"QtWidgets/QComboBox/#QtWidgets.QComboBox.currentText","title":"<code>currentText()</code>","text":"<p>Gets the text of the currently selected item in the combo box. For an empty combo box, returns an empty string.</p> <p>Returns:</p> Type Description <code>str</code> <p>The text of the currently selected item.</p> <p></p>"},{"location":"QtWidgets/QComboBox/#QtWidgets.QComboBox.removeItem","title":"<code>removeItem(index)</code>","text":"<p>Removes the item at the given index from the combo box.</p> <p>Parameters:</p> Name Type Description Default <code>index</code> <code>int</code> <p>The index of the item to remove.</p> required <p></p>"},{"location":"QtWidgets/QComboBox/#QtWidgets.QComboBox.setCurrentIndex","title":"<code>setCurrentIndex(index)</code>","text":"<p>Sets the current index of the combo box to the given index.</p> <p>Parameters:</p> Name Type Description Default <code>index</code> <code>int</code> <p>The index of the item to set as the current item.</p> required <p></p>"},{"location":"QtWidgets/QComboBox/#QtWidgets.QComboBox.setCurrentText","title":"<code>setCurrentText(text)</code>","text":"<p>Sets the current text of the combo box to the given text.</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>The text to set as the current text.</p> required <p> </p>"},{"location":"QtWidgets/QDoubleSpinBox/","title":"QDoubleSpinBox","text":"<p><code>QDoubleSpinBox</code> is designed to handle double values. For integers, use <code>QSpinBox</code> instead. <code>QDoubleSpinBox</code> allows the user to choose a value by clicking the up and down buttons to increment or decrement the value displayed. The value can also be changed by typing in a value. The range of valid values and the number of decimal places shown is configurable.</p> Signals <ul> <li><code>valueChanged</code>: Emitted when the value in the spin box changes.</li> </ul> Methods <ul> <li><code>setMaximum</code></li> <li><code>setMinimum</code></li> <li><code>setSingleStep</code></li> <li><code>setValue</code></li> <li><code>value</code></li> </ul> <p></p> <p>Examples <pre><code>spin_box = QDoubleSpinBox()\nspin_box.setMaximum(100)\nspin_box.setMinimum(0)\nspin_box.setSingleStep(0.1)\nspin_box.setValue(50)\nprint(spin_box.value())\n</code></pre> <code>50.0</code> <pre><code>spin_box.setValue(200)\nprint(spin_box.value())\n</code></pre> <code>100.0</code> </p> <p></p>"},{"location":"QtWidgets/QDoubleSpinBox/#QtWidgets.QDoubleSpinBox.setMaximum","title":"<code>setMaximum(max)</code>","text":"<p>Sets the maximum value of the spin box. The default maximum value is 99.99.</p> <p>Parameters:</p> Name Type Description Default <code>max</code> <code>float</code> <p>The new maximum value.</p> required <p></p>"},{"location":"QtWidgets/QDoubleSpinBox/#QtWidgets.QDoubleSpinBox.setMinimum","title":"<code>setMinimum(min)</code>","text":"<p>Sets the minimum value of the spin box. The default minimum value is 0.0.</p> <p>Parameters:</p> Name Type Description Default <code>min</code> <code>float</code> <p>The new minimum value.</p> required <p></p>"},{"location":"QtWidgets/QDoubleSpinBox/#QtWidgets.QDoubleSpinBox.setSingleStep","title":"<code>setSingleStep(val)</code>","text":"<p>Sets the value that the spin box will increment or decrement by when the up or down buttons are clicked. The default step value is 1.0. Setting a singleStep value of less than 0 does nothing.</p> <p>Parameters:</p> Name Type Description Default <code>val</code> <code>float</code> <p>The new step value.</p> required <p></p>"},{"location":"QtWidgets/QDoubleSpinBox/#QtWidgets.QDoubleSpinBox.setValue","title":"<code>setValue(val)</code>","text":"<p>Sets the value of the spin box. If the value is outside the range of the spin box, the value is adjusted to the nearest limit.</p> <p>Parameters:</p> Name Type Description Default <code>val</code> <code>float</code> <p>The new value.</p> required <p></p>"},{"location":"QtWidgets/QDoubleSpinBox/#QtWidgets.QDoubleSpinBox.value","title":"<code>value()</code>","text":"<p>Returns the value of the spin box.</p> <p>Returns:</p> Type Description <code>float</code> <p>The value of the spin box.</p> <p> </p>"},{"location":"QtWidgets/QGroupBox/","title":"QGroupBox","text":"<p>summary</p> <p>Parameters:</p> Name Type Description Default <code>PySide6</code> <code>_type_</code> <p>description</p> required"},{"location":"QtWidgets/QHBoxLayout/","title":"QHBoxLayout","text":"<p>The <code>QHBoxLayout</code> class lines up widgets horizontally. If the widgets do not fit in the window, the layout will automatically wrap or resize them. For a vertical layout, use <code>QVBoxLayout</code>.</p> <p>Parameters:</p> Name Type Description Default <code>parent</code> <code>QWidget</code> <p>Parent widget</p> <code>None</code> Methods <ul> <li><code>addLayout</code></li> <li><code>addWidget</code></li> </ul> <p></p> <p>Examples</p> <p><pre><code>central_widget = QtWidgets.QWidget()\nlayout = QHBoxLayout(central_widget)\nlayout.addWidget(QPushButton(\"Button 1\"))\nlayout.addWidget(QPushButton(\"Button 2\"))\n</code></pre> In the above example, a horizontal layout is created, added to a central widget, and two buttons are added to it. The buttons will be displayed horizontally.</p> <p></p> <p><pre><code>central_widget = QtWidgets.QWidget()\nlayout = QHBoxLayout(central_widget)\nlayout.addLayout(QVBoxLayout())\n</code></pre> In the above example, a horizontal layout is created, added to a central widget, and a vertical layout is added to it.</p> <p></p>"},{"location":"QtWidgets/QHBoxLayout/#QtWidgets.QHBoxLayout.addLayout","title":"<code>addLayout(layout)</code>","text":"<p>Adds a layout to the horizontal box layout</p> <p>Parameters:</p> Name Type Description Default <code>Layout</code> <code>QBoxLayout</code> <p>Layout</p> required <p></p>"},{"location":"QtWidgets/QHBoxLayout/#QtWidgets.QHBoxLayout.addWidget","title":"<code>addWidget(widget)</code>","text":"<p>Adds a widget to the horizontal box layout</p> <p>Parameters:</p> Name Type Description Default <code>widget</code> <code>QWidget</code> <p>Widget</p> required <p> </p>"},{"location":"QtWidgets/QLabel/","title":"QLabel","text":"<p><code>QLabel</code> is used for displaying text or an image. No user interaction functionality is provided.</p> Methods <ul> <li><code>setText</code></li> <li><code>text</code></li> </ul> <p></p> <p>Examples <pre><code>label = QLabel()\nlabel.setText(\"Hello World!\")\nprint(label.text())\n</code></pre> <code>'Hello World!'</code> </p> <p></p>"},{"location":"QtWidgets/QLabel/#QtWidgets.QLabel.setText","title":"<code>setText(text)</code>","text":"<p>Sets the label's text to the given text.</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>The text to set.</p> required <p></p>"},{"location":"QtWidgets/QLabel/#QtWidgets.QLabel.text","title":"<code>text()</code>","text":"<p>Returns the label's text.</p> <p>Returns:</p> Type Description <code>str</code> <p>The label's text.</p> <p> </p>"},{"location":"QtWidgets/QMainWindow/","title":"QMainWindow","text":"<p>A main window provides a framework for building an application's user interface. Every user interface has to have a <code>QMainWindow</code>. It has to have a central widget, which is the main widget in the window. The central widget can be a <code>QWidget</code> or any other widget subclass. To this central widget, you can add other layouts, such as <code>QHBoxLayout</code> and <code>QVBoxLayout</code>.</p> Methods <ul> <li><code>setCentralWidget</code></li> <li><code>show</code></li> </ul> <p></p> <p>Examples <pre><code>from PySide6 import QtWidgets\nimport sys\n\nclass UserInterface(QtWidgets.QMainWindow):\n    def __init__(self):\n\n        # Call the QMainWindow __init__ method.\n        super().__init__()\n\n        # Set the central widget; every QMainWindow must have a central widget.\n        central_widget = QtWidgets.QWidget()\n        self.setCentralWidget(QtWidgets.QWidget())\n\n        # Add a layout to the central widget.\n        layout = QtWidgets.QVBoxLayout(central_widget)\n\ndef main():\n\n    # Create the application object.\n    app = QtWidgets.QApplication(sys.argv)\n\n    # Create the main window, show it, and start the event loop.\n    window = UserInterface()\n    window.show()\n    app.exec()\n</code></pre>     In the above example, a simple user interface is created using the <code>QMainWindow</code> class.     We create a class called <code>UserInterface</code> that inherits from     <code>QMainWindow</code>. We then call the <code>__init__</code> method of the <code>QMainWindow</code> class using     the <code>super()</code> function. We then create a central widget and set it as the central     widget of the main window and add a layout to the central widget.     Finally, we create an instance of the <code>UserInterface</code> class, show the main window,     and start the application event loop.          Running the above code will display a window with a vertical layout.</p> <p></p>"},{"location":"QtWidgets/QMainWindow/#QtWidgets.QMainWindow.setCentralWidget","title":"<code>setCentralWidget(widget)</code>","text":"<p>Sets the given widget to be the main window's central widget.</p> <p>Parameters:</p> Name Type Description Default <code>widget</code> <code>QWidget</code> <p>The widget to set as the central widget.</p> required <p></p>"},{"location":"QtWidgets/QMainWindow/#QtWidgets.QMainWindow.show","title":"<code>show()</code>","text":"<p>Shows the main window.</p> <p></p>"},{"location":"QtWidgets/QPushButton/","title":"QPushButton","text":"<p>The push button, or command button, is perhaps the most commonly used widget in any graphical user interface. Push (click) a button to command the computer to perform some action, or to answer a question. Typical buttons are OK, Apply, Cancel, Close, Yes, No and Help.</p> Signals <ul> <li><code>clicked</code>: Emitted when the button is clicked.</li> </ul> Methods <ul> <li><code>text</code></li> <li><code>setText</code></li> </ul> <p></p> <p>Examples <pre><code>button = QPushButton()\nbutton.setText(\"Click me!\")\nprint(button.text())\n</code></pre> <code>'Click me!'</code> </p> <p></p>"},{"location":"QtWidgets/QPushButton/#QtWidgets.QPushButton.text","title":"<code>text()</code>","text":"<p>Returns the text displayed in the button.</p> <p>Returns:</p> Type Description <code>str</code> <p>The text displayed in the button.</p> <p></p>"},{"location":"QtWidgets/QPushButton/#QtWidgets.QPushButton.setText","title":"<code>setText(text)</code>","text":"<p>Sets the text to be displayed in the button.</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>The text to display in the button.</p> required <p> </p>"},{"location":"QtWidgets/QSpinBox/","title":"QSpinBox","text":"<p><code>QSpinBox</code> is designed to handle integers and discrete sets of values. Use <code>QDoubleSpinBox</code> for floating point values. <code>QSpinBox</code> allows the user to choose a value by clicking the up and down buttons to increment or decrement the value displayed. The value can also be changed by typing in a value. The range of valid values and the number of decimal places shown is configurable.</p> Signals <ul> <li><code>valueChanged</code>: Emitted when the value in the spin box changes.</li> </ul> Methods <ul> <li><code>setMaximum</code></li> <li><code>setMinimum</code></li> <li><code>setSingleStep</code></li> <li><code>setValue</code></li> <li><code>value</code></li> </ul> <p></p> <p>Examples <pre><code>spin_box = QSpinBox()\nspin_box.setMaximum(100)\nspin_box.setMinimum(0)\nspin_box.setSingleStep(5)\nspin_box.setValue(50)\nprint(spin_box.value())\n</code></pre> <code>50</code> <pre><code>spin_box.setValue(200)\nprint(spin_box.value())\n</code></pre> <code>100</code> </p> <p></p>"},{"location":"QtWidgets/QSpinBox/#QtWidgets.QSpinBox.setMaximum","title":"<code>setMaximum(max)</code>","text":"<p>Sets the maximum value of the spin box. The default maximum value is 99.</p> <p>Parameters:</p> Name Type Description Default <code>max</code> <code>int</code> <p>The maximum value of the spin box.</p> required <p></p>"},{"location":"QtWidgets/QSpinBox/#QtWidgets.QSpinBox.setMinimum","title":"<code>setMinimum(min)</code>","text":"<p>Sets the minimum value of the spin box. The default minimum value is 0.</p> <p>Parameters:</p> Name Type Description Default <code>min</code> <code>int</code> <p>The minimum value of the spin box.</p> required <p></p>"},{"location":"QtWidgets/QSpinBox/#QtWidgets.QSpinBox.setSingleStep","title":"<code>setSingleStep(val)</code>","text":"<p>Sets the value that the spin box will increment or decrement by when the up or down buttons are clicked. The default step value is 1. Setting a value less than 0 does nothing.</p> <p>Parameters:</p> Name Type Description Default <code>val</code> <code>int</code> <p>The value to increment or decrement by.</p> required <p></p>"},{"location":"QtWidgets/QSpinBox/#QtWidgets.QSpinBox.setValue","title":"<code>setValue(val)</code>","text":"<p>Sets the value of the spin box. If the value is outside the range of the spin box, the value is adjusted to the nearest limit.</p> <p>Parameters:</p> Name Type Description Default <code>val</code> <code>int</code> <p>The value to set the spin box to.</p> required <p></p>"},{"location":"QtWidgets/QSpinBox/#QtWidgets.QSpinBox.value","title":"<code>value()</code>","text":"<p>Returns the current value of the spin box.</p> <p>Returns:</p> Type Description <code>int</code> <p>The current value of the spin box.</p> <p> </p>"},{"location":"QtWidgets/QTextEdit/","title":"QTextEdit","text":"<p>summary</p> <p>Parameters:</p> Name Type Description Default <code>PySide6</code> <code>_type_</code> <p>description</p> required"},{"location":"QtWidgets/QVBoxLayout/","title":"QVBoxLayout","text":"<p>The <code>QVBoxLayout</code> class lines up widgets vertically. If the widgets do not fit in the window, the layout will automatically wrap or resize them. For a horizontal layout, see <code>QHBoxLayout </code>.</p> <p>Parameters:</p> Name Type Description Default <code>parent</code> <code>QWidget</code> <p>Parent widget.</p> <code>None</code> Methods <ul> <li><code>addLayout</code></li> <li><code>addWidget</code></li> </ul> <p></p> <p>Examples</p> <p><pre><code>vbox = QVBoxLayout()\ntextedit = QTextEdit()\nvbox.addWidget(textedit)\n</code></pre> In the above example, a vertical layout is created and a QTextEdit widget is added to it.</p> <p><pre><code>vbox = QVBoxLayout()\nhbox = QHBoxLayout()\nvbox.addLayout(hbox)\n</code></pre> In the above example, a vertical layout is created and a horizontal layout is added to it.</p> <p></p>"},{"location":"QtWidgets/QVBoxLayout/#QtWidgets.QVBoxLayout.addLayout","title":"<code>addLayout(layout)</code>","text":"<p>Adds a layout to the vertical box layout</p> <p>Parameters:</p> Name Type Description Default <code>Layout</code> <code>QBoxLayout</code> <p>Layout</p> required <p></p>"},{"location":"QtWidgets/QVBoxLayout/#QtWidgets.QVBoxLayout.addWidget","title":"<code>addWidget(widget)</code>","text":"<p>Adds a widget to the vertical box layout</p> <p>Parameters:</p> Name Type Description Default <code>widget</code> <code>QWidget</code> <p>Widget</p> required <p> </p>"}]}