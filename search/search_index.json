{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>   PySide6 Compact Documentation  <p>    Welcome to the PySide6 Compact Documentation! This guide is designed for beginners and aims to provide clear and explanatory information about the PySide6 Python package.      PySide6 is derived from the  C++ library Qt , a well-known framework for building graphical user interfaces.   Getting Started \ud83d\ude80 <p>To get started, you can install  PySide6 and follow the tutorial.  </p> Compact Documentation \ud83d\udcc4 <p>For a clear and concise explanation of the functions and classes in PySide6, refer to the API reference.</p> About \ud83d\udde3 <p> This documentation was created for the course Experiment Control with Python Course (ECPC) at the University of Amsterdam. </p> Full Documentation \ud83d\udcda <p>For the complete PySide6 documentation, visit the Qt for Python docs.</p>"},{"location":"Installation_Guide/","title":"Installation Guide","text":"<p>The only prerequisite for installing PySide6 is having Python installed on your system. PySide6 can be installed using the Python package manager <code>conda</code>, <code>pip</code>, or <code>poetry</code>.</p>"},{"location":"Installation_Guide/#conda","title":"Conda","text":"<p>If you use <code>conda</code>, you can install PySide6 from the <code>conda-forge</code> channel. Best practice is to use an environment for your PySide6 project, and not to install it in your base environment:</p> <ol> <li>Create and activate an environment: <pre><code>conda create -n myenv\nconda activate myenv\n</code></pre></li> <li>Download PySide6 from the <code>conda-forge</code> channel in the environment: <pre><code>conda install -c conda-forge pyside6\n</code></pre></li> </ol>"},{"location":"Installation_Guide/#pip","title":"Pip","text":"<p>If you use <code>pip</code>, you can install PySide6 using the commands below. Also with <code>pip</code>, it is best practice to use a virtual environment. It is customary to use <code>venv</code> for this purpose. <code>venv</code> is built into Python and does not require any additional installation:</p> <ol> <li>Create and activate an environment: <pre><code>python -m venv myenv\n</code></pre></li> <li>Activate the environment:     Windows : <pre><code>myenv\\Scripts\\activate\n</code></pre> Unix / macOS: <pre><code>source myenv/bin/activate\n</code></pre></li> <li>Install PySide6 in the environment: <pre><code>pip install pyside6\n</code></pre></li> </ol>"},{"location":"Installation_Guide/#poetry","title":"Poetry","text":"<p>If you use <code>poetry</code>, you can install PySide6 using the commands below. Also with <code>poetry</code> it is best practice to use a virtual environment. This virtual environment can be either a <code>venv</code> or <code>conda</code> environment. </p> <ol> <li>Create and activate an environment. See sections <code>pip</code> and <code>conda</code> above on how to create and activate a <code>venv</code> or <code>conda</code> environment, respectively.</li> <li>Create a Poetry project, if you haven't already, and navigate to it: <pre><code>poetry new myproject\ncd myproject\n</code></pre></li> <li>Add PySide6 to the project's <code>pyproject.toml</code> file and install to the virtual environment: <pre><code>poetry add pyside6\npoetry install\n</code></pre></li> </ol> <p> </p>"},{"location":"QtWidgets/","title":"Overview","text":"<p>In this API Reference we will cover relevant classes and functions which are part of the <code>QtWidgets</code> module. The <code>QtWidgets</code> module contains classes that provide a set of UI elements to create classic desktop-style graphical user interfaces (GUI's). The <code>QWidget</code> class is the base class for all UI objects, and the <code>QLayout</code> class is the base class for all layout objects. An overview of the classes and functions in the <code>QtWidgets</code> module is provided at the bottom of this page.</p> <p>Note</p> <p>Methods from parent classes (i.e. <code>QWidget</code> and <code>QLayout</code>) are not repeated in the reference of each subclass. However, as always in Python (  ), these methods are applicable to all subclasses. </p> <p>Note</p> <p>Note the difference between <code>QtWidgets</code> and <code>QWidget</code>, which are a module and class respectively. Convince yourself by examining the following code: <pre><code>from PySide6 import QtWidgets\nfrom PySide6.QtWidgets import QWidget\n\n# The following two lines are equivalent:\nwidget = QtWidgets.QWidget()\nwidget = QWidget()\n</code></pre> In the above code we create an instance of the <code>QWidget</code> in two ways. In practice we do not use direct instances of <code>QWidget</code> to build our GUI, but rather use its subclasses (see the list below). </p>"},{"location":"QtWidgets/#all-classes-from-the-qtwidgets-module","title":"All classes from the <code>QtWidgets</code> module:","text":"<ul> <li><code>QApplication</code>: Manages the GUI application's control flow and main settings.</li> <li><code>QLayout</code>: Base class of all layout objects in <code>QtWidgets</code>.  </li> <li> <p><code>QWidget</code>: Base class of all widget objects in <code>QtWidgets</code>. </p> </li> <li> </li> <li> </li> </ul> <p> </p>"},{"location":"QtWidgets/#subclasses-derived-from-qlayout","title":"Subclasses derived from <code>QLayout</code>:","text":"<ul> <li><code>QHBoxLayout</code>: Manages a horizontal layout of widgets. </li> <li><code>QVBoxLayout</code>: Manages a vertical layout of widgets. </li> <li><code>QGridLayout</code>: Manages a grid layout where space is divided up into rows and columns.</li> <li><code>QFormLayout</code>: Manages a layout where space is divided in a left column with labels and right column with widgets.  </li> </ul>"},{"location":"QtWidgets/#subclasses-derived-from-qwidget","title":"Subclasses derived from <code>QWidget</code>:","text":"<ul> <li><code>QMainWindow</code>: Provides a framework for building an application's user interface.</li> <li><code>QGroupBox</code>: Provides a frame, a title on top, and can display various other widgets inside itself.</li> <li><code>QTextEdit</code>: Displays text and allows the user to edit it.</li> <li><code>QLineEdit</code>: A widget that allows the user to enter and edit a single line of plain text.</li> <li><code>QFileDialog</code>: Provides a dialog that allows the user to select files or directories.</li> <li><code>QCheckBox</code>: Toggle button with a checkbox indicator.  </li> <li><code>QLabel</code>: A widget that displays text.</li> <li><code>QComboBox</code>: A widget that allows the user to choose from a list of options. </li> <li><code>QSpinBox</code>: A widget that allows the user to choose a number from a range.</li> <li><code>QDoubleSpinBox</code>: A widget that allows the user to choose a floating-point number from a range.</li> <li><code>QPushButton</code>: A push button that can be clicked by the user.</li> </ul>"},{"location":"QtWidgets/QApplication/","title":"QApplication","text":"<p>The <code>QApplication</code> class manages the GUI application's control flow and main settings. It is the starting point for the GUI application. Every GUI application must have exactly one instance of this class.</p> Methods <ul> <li><code>exec</code></li> </ul> <p></p> <p>Examples</p> <p><pre><code>app = QtWidgets.QApplication()\nwindow = QtWidgets.QMainWindow()\nwindow.show()\napp.exec()\n</code></pre> In the above example, an instance of the <code>QApplication</code> class is created and a <code>QMainWindow</code> is created and shown. The <code>exec</code> method is then called to start the application event loop. Running the above code will display an empty window.</p> <p></p>"},{"location":"QtWidgets/QApplication/#code.QtWidgets.QApplication.exec","title":"<code>exec()</code>","text":"<p>Enters the main event loop and waits the application to finish. The event loop is quit when the last window is closed.</p> <p>Returns:</p> Type Description <code>int</code> <p>The return code of the application.</p> <p> </p>"},{"location":"QtWidgets/QCheckBox/","title":"QCheckBox","text":"<p>A <code>QCheckBox</code> widget is a toggle button that can be checked or unchecked. Checkboxes are typically used to represent features in an application that can be enabled or disabled without affecting others. By default, a checkbox is unchecked.</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>The text to display next to the checkbox.</p> <code>None</code> Signals <ul> <li><code>stateChanged</code>: Emitted whenever the checkbox's state changes.</li> </ul> Methods <ul> <li><code>IsChecked</code></li> <li><code>setChecked</code></li> <li><code>setText</code></li> <li><code>text</code></li> </ul> <p></p> <p>Examples <pre><code>checkbox = QtWidgets.QCheckBox()\nprint(checkbox.IsChecked())\n</code></pre> <code>False</code> <pre><code>checkbox.setChecked(True)\nprint(checkbox.IsChecked())\n</code></pre> <code>True</code> </p> <p></p>"},{"location":"QtWidgets/QCheckBox/#code.QtWidgets.QCheckBox.IsChecked","title":"<code>IsChecked()</code>","text":"<p>Returns True if the checkbox is checked; otherwise returns False.</p> <p>Returns:</p> Type Description <code>bool</code> <p>True if the checkbox is checked; otherwise False.</p> <p></p>"},{"location":"QtWidgets/QCheckBox/#code.QtWidgets.QCheckBox.setChecked","title":"<code>setChecked(checked)</code>","text":"<p>Sets the checkbox to be checked if checked is True; otherwise sets it to be unchecked.</p> <p>Parameters:</p> Name Type Description Default <code>checked</code> <code>bool</code> <p>True to check the checkbox; otherwise False.</p> required <p></p>"},{"location":"QtWidgets/QCheckBox/#code.QtWidgets.QCheckBox.setText","title":"<code>setText(text)</code>","text":"<p>Set the text to display next to the checkbox.</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>The text to display next to the checkbox.</p> required <p></p>"},{"location":"QtWidgets/QCheckBox/#code.QtWidgets.QCheckBox.text","title":"<code>text()</code>","text":"<p>Get the text displayed next to the checkbox.</p> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>The text displayed next to the checkbox.</p> <p> </p>"},{"location":"QtWidgets/QComboBox/","title":"QComboBox","text":"<p>A <code>QComboBox</code> is a button that provides a list of options to the user when clicked. The user can select an option from the list. The selected option is displayed in the combo box.</p> Signals <ul> <li><code>currentIndexChanged</code>: Emitted when the current index changes.</li> </ul> Methods <ul> <li><code>addItem</code></li> <li><code>addItems</code></li> <li><code>clear</code></li> <li><code>currentIndex</code></li> <li><code>currentText</code></li> <li><code>removeItem</code></li> <li><code>setCurrentIndex</code></li> <li><code>setCurrentText</code></li> </ul> <p></p> <p>Examples <pre><code>combo = QtWidgets.QComboBox()\ncombo.addItem(\"Option 1\")\ncombo.addItems([\"Option 2\", \"Option 3\"])\nprint(combo.currentText())\n</code></pre> <code>'Option 1'</code> <pre><code>print(combo.currentIndex())\n</code></pre> <code>'0'</code> <pre><code>combo.setCurrentIndex(2)\nprint(combo.currentText())\n</code></pre> <code>'Option 3'</code> <pre><code>combo.clear()\nprint(combo.currentText())\n</code></pre> <code>''</code> <pre><code>print(combo.currentIndex())\n</code></pre> <code>'-1'</code> </p>"},{"location":"QtWidgets/QComboBox/#code.QtWidgets.QComboBox.addItem","title":"<code>addItem(text)</code>","text":"<p>Adds an item to the combo box with the given text.</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>The text to display in the combo box.</p> required <p></p>"},{"location":"QtWidgets/QComboBox/#code.QtWidgets.QComboBox.addItems","title":"<code>addItems(texts)</code>","text":"<p>Adds the items in the list texts to the combo box.</p> <p>Parameters:</p> Name Type Description Default <code>texts</code> <code>Sequence[str]</code> <p>The list of strings to add to the combo box.</p> required <p></p>"},{"location":"QtWidgets/QComboBox/#code.QtWidgets.QComboBox.clear","title":"<code>clear()</code>","text":"<p>Clears the contents of the combo box, removing all items.</p> <p></p>"},{"location":"QtWidgets/QComboBox/#code.QtWidgets.QComboBox.currentIndex","title":"<code>currentIndex()</code>","text":"<p>Gets the index of the currently selected item in the combo box. For an empty combo box, returns -1. The current index can change when inserting or removing items.</p> <p>Returns:</p> Type Description <code>int</code> <p>The index of the currently selected item.</p> <p></p>"},{"location":"QtWidgets/QComboBox/#code.QtWidgets.QComboBox.currentText","title":"<code>currentText()</code>","text":"<p>Gets the text of the currently selected item in the combo box. For an empty combo box, returns an empty string.</p> <p>Returns:</p> Type Description <code>str</code> <p>The text of the currently selected item.</p> <p></p>"},{"location":"QtWidgets/QComboBox/#code.QtWidgets.QComboBox.removeItem","title":"<code>removeItem(index)</code>","text":"<p>Removes the item at the given index from the combo box.</p> <p>Parameters:</p> Name Type Description Default <code>index</code> <code>int</code> <p>The index of the item to remove.</p> required <p></p>"},{"location":"QtWidgets/QComboBox/#code.QtWidgets.QComboBox.setCurrentIndex","title":"<code>setCurrentIndex(index)</code>","text":"<p>Sets the current index of the combo box to the given index.</p> <p>Parameters:</p> Name Type Description Default <code>index</code> <code>int</code> <p>The index of the item to set as the current item.</p> required <p></p>"},{"location":"QtWidgets/QComboBox/#code.QtWidgets.QComboBox.setCurrentText","title":"<code>setCurrentText(text)</code>","text":"<p>Sets the current text of the combo box to the given text.</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>The text to set as the current text.</p> required <p> </p>"},{"location":"QtWidgets/QDoubleSpinBox/","title":"QDoubleSpinBox","text":"<p><code>QDoubleSpinBox</code> is designed to handle double values. For integers, use <code>QSpinBox</code> instead. <code>QDoubleSpinBox</code> allows the user to choose a value by clicking the up and down buttons to increment or decrement the value displayed. The value can also be changed by typing in a value. The range of valid values and the number of decimal places shown is configurable.</p> Signals <ul> <li><code>valueChanged</code>: Emitted when the value in the spin box changes.</li> </ul> Methods <ul> <li><code>setMaximum</code></li> <li><code>setMinimum</code></li> <li><code>setSingleStep</code></li> <li><code>setValue</code></li> <li><code>value</code></li> <li><code>setRange</code></li> <li><code>setPrefix</code></li> <li><code>setSuffix</code></li> </ul> <p></p> <p>Examples <pre><code>spin_box = QtWidgets.QDoubleSpinBox()\nspin_box.setMaximum(100)\nspin_box.setMinimum(0)\nspin_box.setSingleStep(0.1)\nspin_box.setValue(50)\nprint(spin_box.value())\n</code></pre> <code>50.0</code> <pre><code>spin_box.setValue(200)\nprint(spin_box.value())\n</code></pre> <code>100.0</code> </p> <p></p>"},{"location":"QtWidgets/QDoubleSpinBox/#code.QtWidgets.QDoubleSpinBox.setMaximum","title":"<code>setMaximum(max)</code>","text":"<p>Set the maximum value of the spin box. The default maximum value is 99.99.</p> <p>Parameters:</p> Name Type Description Default <code>max</code> <code>float</code> <p>The new maximum value.</p> required <p></p>"},{"location":"QtWidgets/QDoubleSpinBox/#code.QtWidgets.QDoubleSpinBox.setMinimum","title":"<code>setMinimum(min)</code>","text":"<p>Set the minimum value of the spin box. The default minimum value is 0.0.</p> <p>Parameters:</p> Name Type Description Default <code>min</code> <code>float</code> <p>The new minimum value.</p> required <p></p>"},{"location":"QtWidgets/QDoubleSpinBox/#code.QtWidgets.QDoubleSpinBox.setPrefix","title":"<code>setPrefix(prefix)</code>","text":"<p>Set the prefix of the spin box. The prefix is displayed before the value in the spin box and is not editable by the user.</p> <p>Parameters:</p> Name Type Description Default <code>prefix</code> <code>str</code> <p>The new prefix.</p> required <p></p>"},{"location":"QtWidgets/QDoubleSpinBox/#code.QtWidgets.QDoubleSpinBox.setRange","title":"<code>setRange(min, max)</code>","text":"<p>Set the minimum and maximum values of the spin box. If the current value is outside the new range, the value is adjusted to the nearest limit.</p> <p>Parameters:</p> Name Type Description Default <code>min</code> <code>float</code> <p>The new minimum value.</p> required <code>max</code> <code>float</code> <p>The new maximum value.</p> required <p></p>"},{"location":"QtWidgets/QDoubleSpinBox/#code.QtWidgets.QDoubleSpinBox.setSingleStep","title":"<code>setSingleStep(val)</code>","text":"<p>Set the value that the spin box will increment or decrement by when the up or down buttons are clicked. The default step value is 1.0. Setting a singleStep value of less than 0 does nothing.</p> <p>Parameters:</p> Name Type Description Default <code>val</code> <code>float</code> <p>The new step value.</p> required <p></p>"},{"location":"QtWidgets/QDoubleSpinBox/#code.QtWidgets.QDoubleSpinBox.setSuffix","title":"<code>setSuffix(suffix)</code>","text":"<p>Set the suffix of the spin box. The suffix is displayed after the value in the spin box and is not editable by the user.</p> <p>Parameters:</p> Name Type Description Default <code>suffix</code> <code>str</code> <p>The new suffix.</p> required <p></p>"},{"location":"QtWidgets/QDoubleSpinBox/#code.QtWidgets.QDoubleSpinBox.setValue","title":"<code>setValue(val)</code>","text":"<p>Set the value of the spin box. If the value is outside the range of the spin box, the value is adjusted to the nearest limit.</p> <p>Parameters:</p> Name Type Description Default <code>val</code> <code>float</code> <p>The new value.</p> required <p></p>"},{"location":"QtWidgets/QDoubleSpinBox/#code.QtWidgets.QDoubleSpinBox.value","title":"<code>value()</code>","text":"<p>Returns the value of the spin box.</p> <p>Returns:</p> Type Description <code>float</code> <p>The value of the spin box.</p> <p> </p>"},{"location":"QtWidgets/QFileDialog/","title":"QFileDialog","text":"<p><code>QFileDialog</code> provides a dialog that allows users to select files or directories.</p> Methods <ul> <li><code>getSaveFileName</code></li> </ul> <p></p> <p>Examples</p> <p><pre><code>from PySide6 import QtWidgets\nfrom PySide6.QtCore import Slot\n\n\napp = QtWidgets.QApplication()\nwindow = QtWidgets.QMainWindow()\n\n@Slot()\ndef save_file():\n    # Get the filename selected by the user\n    file_name, _ = QtWidgets.QFileDialog.getSaveFileName(filter=\"CSV files (*.csv)\")\n\n    # Save the data to this file\n    with open(file_name, \"w\") as file:\n        file.write(data)\n\ndata = \"1,2,3,4,5\"\nbutton = QtWidgets.QPushButton(\"Save File\")\n# A main window always requires a central widget\nwindow.setCentralWidget(button)\nbutton.clicked.connect(save_file)\n\nwindow.show()\napp.exec()\n</code></pre> The above example shows the shortest working code to save data to a CSV file. Running the code above will display a window with a QPushButton that allows the user to save the data (<code>\"1,2,3,4,5\"</code>) to a CSV file.</p> <p></p>"},{"location":"QtWidgets/QFileDialog/#code.QtWidgets.QFileDialog.getSaveFileName","title":"<code>getSaveFileName(caption=None, dir=None, filter=None)</code>  <code>staticmethod</code>","text":"<p>Opens a dialog for saving a file. The dialog is displayed as a modal dialog and returns the selected file name and filter.</p> <p>Parameters:</p> Name Type Description Default <code>caption</code> <code>str</code> <p>The dialog caption.</p> <code>None</code> <code>dir</code> <code>str</code> <p>The initial directory.</p> <code>None</code> <code>filter</code> <code>str</code> <p>The file filter. Generally, this is a string like \"Image files (.png .jpg)\" or \"Text files (.txt);;CSV files (.csv)\", where multiple filters are separated by two semicolons.</p> <code>None</code> <p>Returns:</p> Type Description <code>Tuple[str, str]</code> <p>A tuple containing the selected file name and filter.</p> <p> </p>"},{"location":"QtWidgets/QFormLayout/","title":"QFormLayout","text":"<p><code>QFormLayout</code> is a layout manager that arranges widgets in a two-column layout. The left column contains labels, and the right column contains widgets. This layout can also be achieved using <code>QGridLayout</code> but <code>QFormLayout</code> provides a more convenient way to create form-like layouts.</p> Methods <ul> <li><code>addRow</code></li> <li><code>horizontalSpacing</code></li> <li><code>setHorizontalSpacing</code></li> <li><code>verticalSpacing</code></li> <li><code>setVerticalSpacing</code></li> <li><code>removeRow</code></li> <li><code>rowCount</code></li> </ul> <p></p> <p>Examples</p> <p><pre><code>layout = QtWidgets.QFormLayout()\nlabel = QtWidgets.QLabel(\"Name:\")\nline_edit = QtWidgets.QLineEdit()\nlayout.addRow(label, line_edit)\n\nprint(layout.rowCount())\n</code></pre> <code>1</code> <pre><code>spin_box = QtWidgets.QSpinBox()\nlayout.addRow(\"age\", spinbox)\n\nlayout.removeRow(0)\nprint(layout.rowCount())\n</code></pre> <code>1</code></p> <p></p>"},{"location":"QtWidgets/QFormLayout/#code.QtWidgets.QFormLayout.addRow","title":"<code>addRow(label, field)</code>","text":"<p>Add a row to the form layout with a label and a field. The label can be a string or a widget. The field can be a widget or a layout.</p> <p>Parameters:</p> Name Type Description Default <code>label</code> <code>QWidget | str</code> <p>The label for the field.</p> required <code>field</code> <code>QLayout | QWidget</code> <p>The field to add.</p> required <p></p>"},{"location":"QtWidgets/QFormLayout/#code.QtWidgets.QFormLayout.horizontalSpacing","title":"<code>horizontalSpacing()</code>","text":"<p>Get the horizontal spacing between the items in the layout.</p> <p>Returns:</p> Type Description <code>int</code> <p>The horizontal spacing between the items in the layout.</p> <p></p>"},{"location":"QtWidgets/QFormLayout/#code.QtWidgets.QFormLayout.removeRow","title":"<code>removeRow(row)</code>","text":"<p>Remove the row from the layout. The row can be specified by the row number, the widget, or the layout.</p> <p>Parameters:</p> Name Type Description Default <code>row</code> <code>int | QWidget | QLayout</code> <p>The row to remove.</p> required <p></p>"},{"location":"QtWidgets/QFormLayout/#code.QtWidgets.QFormLayout.rowCount","title":"<code>rowCount()</code>","text":"<p>Get the number of rows in the layout.</p> <p>Returns:</p> Type Description <code>int</code> <p>The number of rows in the layout.</p> <p></p>"},{"location":"QtWidgets/QFormLayout/#code.QtWidgets.QFormLayout.setHorizontalSpacing","title":"<code>setHorizontalSpacing(spacing)</code>","text":"<p>Set the horizontal spacing between the items in the layout.</p> <p>Parameters:</p> Name Type Description Default <code>spacing</code> <code>int</code> <p>The horizontal spacing between the items in the layout.</p> required <p></p>"},{"location":"QtWidgets/QFormLayout/#code.QtWidgets.QFormLayout.setVerticalSpacing","title":"<code>setVerticalSpacing(spacing)</code>","text":"<p>Set the vertical spacing between the items in the layout.</p> <p>Parameters:</p> Name Type Description Default <code>spacing</code> <code>int</code> <p>The vertical spacing between the items in the layout.</p> required <p></p>"},{"location":"QtWidgets/QFormLayout/#code.QtWidgets.QFormLayout.verticalSpacing","title":"<code>verticalSpacing()</code>","text":"<p>Get the vertical spacing between the items in the layout.</p> <p>Returns:</p> Type Description <code>int</code> <p>The vertical spacing between the items in the layout.</p> <p> </p>"},{"location":"QtWidgets/QGridLayout/","title":"QGridLayout","text":"<p>The <code>QGridLayout</code> class lays out widgets in a grid, which has a variable number of rows and columns. The grid layout is used to create a more complex layout than the <code>QHBoxLayout</code> and <code>QVBoxLayout</code> classes, which only allow for horizontal and vertical layouts, respectively.</p> Methods <ul> <li><code>addLayout</code></li> <li><code>addWidget</code></li> <li><code>columnCount</code></li> <li><code>rowCount</code></li> <li><code>setHorizontalSpacing</code></li> <li><code>setVerticalSpacing</code></li> <li><code>setColumnMinimumWidth</code></li> <li><code>setRowMinimumHeight</code></li> <li><code>setColumnStretch</code></li> <li><code>setRowStretch</code></li> <li><code>horizontalSpacing</code></li> <li><code>verticalSpacing</code></li> <li><code>columnMinimumWidth</code></li> <li><code>rowMinimumHeight</code></li> <li><code>columnStretch</code></li> <li><code>rowStretch</code></li> </ul> <p></p> <p>Examples</p> <p><pre><code>layout = QtWidgets.QGridLayout()\nlayout.setHorizontalSpacing(10)\nlayout.setVerticalSpacing(10)\n\nprint(layout.horizontalSpacing(), layout.verticalSpacing())\n</code></pre> <code>10 10</code> <pre><code>layout.addWidget(QPushButton(\"Button 1\"), 0, 0)\nlayout.addWidget(QPushButton(\"Button 2\"), 0, 1)\nlayout.addWidget(QPushButton(\"Button 3\"), 1, 0)\nlayout.addWidget(QPushButton(\"Button 4\"), 1, 1)\n\nprint(layout.columnCount(), layout.rowCount())\n</code></pre> <code>2 2</code></p> <p></p>"},{"location":"QtWidgets/QGridLayout/#code.QtWidgets.QGridLayout.addLayout","title":"<code>addLayout(layout, row, column)</code>","text":"<p>Add a layout to the grid layout at the specified row and column.</p> <p>Parameters:</p> Name Type Description Default <code>layout</code> <code>QLayout</code> <p>The layout to add.</p> required <code>row</code> <code>int</code> <p>The row to add the layout to.</p> required <code>column</code> <code>int</code> <p>The column to add the layout to.</p> required <p></p>"},{"location":"QtWidgets/QGridLayout/#code.QtWidgets.QGridLayout.addWidget","title":"<code>addWidget(widget, row, column)</code>","text":"<p>Add a widget to the grid layout at the specified row and column.</p> <p>Parameters:</p> Name Type Description Default <code>widget</code> <code>QWidget</code> <p>The widget to add.</p> required <code>row</code> <code>int</code> <p>The row to add the widget to.</p> required <code>column</code> <code>int</code> <p>The column to add the widget to.</p> required <p></p>"},{"location":"QtWidgets/QGridLayout/#code.QtWidgets.QGridLayout.columnCount","title":"<code>columnCount()</code>","text":"<p>Get the number of columns in the grid layout.</p> <p>Returns:</p> Name Type Description <code>int</code> <code>int</code> <p>The number of columns in the grid layout.</p> <p></p>"},{"location":"QtWidgets/QGridLayout/#code.QtWidgets.QGridLayout.columnMinimumWidth","title":"<code>columnMinimumWidth(column)</code>","text":"<p>Get the minimum width of the specified column in the grid layout.</p> <p>Parameters:</p> Name Type Description Default <code>column</code> <code>int</code> <p>The column to get the minimum width of.</p> required <p>Returns:</p> Type Description <code>int</code> <p>The minimum width of the specified column in the grid layout.</p> <p></p>"},{"location":"QtWidgets/QGridLayout/#code.QtWidgets.QGridLayout.columnStretch","title":"<code>columnStretch(column)</code>","text":"<p>Get the stretch factor of the specified column in the grid layout.</p> <p>Parameters:</p> Name Type Description Default <code>column</code> <code>int</code> <p>The column to get the stretch factor of.</p> required <p>Returns:</p> Name Type Description <code>int</code> <code>int</code> <p>The stretch factor of the specified column in the grid layout.</p> <p></p>"},{"location":"QtWidgets/QGridLayout/#code.QtWidgets.QGridLayout.horizontalSpacing","title":"<code>horizontalSpacing()</code>","text":"<p>Get the horizontal spacing between items in the grid layout.</p> <p>Returns:</p> Name Type Description <code>int</code> <code>int</code> <p>The horizontal spacing between items in the grid layout.</p> <p></p>"},{"location":"QtWidgets/QGridLayout/#code.QtWidgets.QGridLayout.rowCount","title":"<code>rowCount()</code>","text":"<p>Get the number of rows in the grid layout.</p> <p>Returns:</p> Name Type Description <code>int</code> <code>int</code> <p>The number of rows in the grid layout.</p> <p></p>"},{"location":"QtWidgets/QGridLayout/#code.QtWidgets.QGridLayout.rowMinimumHeight","title":"<code>rowMinimumHeight(row)</code>","text":"<p>Get the minimum height of the specified row in the grid layout.</p> <p>Parameters:</p> Name Type Description Default <code>row</code> <code>int</code> <p>The row to get the minimum height of.</p> required <p>Returns:</p> Name Type Description <code>int</code> <code>int</code> <p>The minimum height of the specified row in the grid layout.</p> <p></p>"},{"location":"QtWidgets/QGridLayout/#code.QtWidgets.QGridLayout.rowStretch","title":"<code>rowStretch(row)</code>","text":"<p>Get the stretch factor of the specified row in the grid layout.</p> <p>Parameters:</p> Name Type Description Default <code>row</code> <code>int</code> <p>The row to get the stretch factor of.</p> required <p>Returns:</p> Name Type Description <code>int</code> <code>int</code> <p>The stretch factor of the specified row in the grid layout.</p> <p></p>"},{"location":"QtWidgets/QGridLayout/#code.QtWidgets.QGridLayout.setColumnMinimumWidth","title":"<code>setColumnMinimumWidth(column, minSize)</code>","text":"<p>Set the minimum width of the specified column in the grid layout.</p> <p>Parameters:</p> Name Type Description Default <code>column</code> <code>int</code> <p>The column to set the minimum width of.</p> required <code>minSize</code> <code>int</code> <p>The minimum width of the specified column.</p> required <p></p>"},{"location":"QtWidgets/QGridLayout/#code.QtWidgets.QGridLayout.setColumnStretch","title":"<code>setColumnStretch(column, stretch)</code>","text":"<p>Set the stretch factor of the specified column in the grid layout.</p> <p>Parameters:</p> Name Type Description Default <code>column</code> <code>int</code> <p>The column to set the stretch factor of.</p> required <code>stretch</code> <code>int</code> <p>The stretch factor of the specified column.</p> required <p></p>"},{"location":"QtWidgets/QGridLayout/#code.QtWidgets.QGridLayout.setHorizontalSpacing","title":"<code>setHorizontalSpacing(spacing)</code>","text":"<p>Set the horizontal spacing between items in the grid layout.</p> <p>Parameters:</p> Name Type Description Default <code>spacing</code> <code>int</code> <p>The horizontal spacing between items in the grid layout.</p> required <p></p>"},{"location":"QtWidgets/QGridLayout/#code.QtWidgets.QGridLayout.setRowMinimumHeight","title":"<code>setRowMinimumHeight(row, minSize)</code>","text":"<p>Set the minimum height of the specified row in the grid layout.</p> <p>Parameters:</p> Name Type Description Default <code>row</code> <code>int</code> <p>The row to set the minimum height of.</p> required <code>minSize</code> <code>int</code> <p>The minimum height of the specified row.</p> required <p></p>"},{"location":"QtWidgets/QGridLayout/#code.QtWidgets.QGridLayout.setRowStretch","title":"<code>setRowStretch(row, stretch)</code>","text":"<p>Set the stretch factor of the specified row in the grid layout.</p> <p>Parameters:</p> Name Type Description Default <code>row</code> <code>int</code> <p>The row to set the stretch factor of.</p> required <code>stretch</code> <code>int</code> <p>The stretch factor of the specified row.</p> required <p></p>"},{"location":"QtWidgets/QGridLayout/#code.QtWidgets.QGridLayout.setVerticalSpacing","title":"<code>setVerticalSpacing(spacing)</code>","text":"<p>Set the vertical spacing between items in the grid layout.</p> <p>Parameters:</p> Name Type Description Default <code>spacing</code> <code>int</code> <p>The vertical spacing between items in the grid layout.</p> required <p></p>"},{"location":"QtWidgets/QGridLayout/#code.QtWidgets.QGridLayout.verticalSpacing","title":"<code>verticalSpacing()</code>","text":"<p>Get the vertical spacing between items in the grid layout.</p> <p>Returns:</p> Name Type Description <code>int</code> <code>int</code> <p>The vertical spacing between items in the grid layout.</p> <p> </p>"},{"location":"QtWidgets/QGroupBox/","title":"QGroupBox","text":"<p><code>QGroupBox</code> is a widget that groups other widgets together. It provides a title and a frame around the widgets it contains.</p> <p>Parameters:</p> Name Type Description Default <code>title</code> <code>str</code> <p>The title of the group box.</p> <code>None</code> Signals <ul> <li><code>clicked</code>: Emitted when the group box is clicked.</li> </ul> Methods <ul> <li><code>setTitle</code></li> <li><code>title</code></li> </ul> <p></p> <p>Examples <pre><code>group_box = QtWidgets.QGroupBox(\"Group Box\")\nlayout = QtWidgets.QVBoxLayout()\nlayout.addWidget(QPushButton(\"Button 1\"))\nlayout.addWidget(QPushButton(\"Button 2\"))\n\ngroup_box.setLayout(layout)\n</code></pre>     Running the above code will create a group box with the title \"Group Box\" and two buttons aligned vertically inside it.     Note that the layout is set using the <code>setLayout</code> method from the parent <code>QWidget</code> class.     </p> <p></p>"},{"location":"QtWidgets/QGroupBox/#code.QtWidgets.QGroupBox.setTitle","title":"<code>setTitle(title)</code>","text":"<p>Set the title of the group box.</p> <p>Parameters:</p> Name Type Description Default <code>title</code> <code>str</code> <p>The title of the group box.</p> required <p></p>"},{"location":"QtWidgets/QGroupBox/#code.QtWidgets.QGroupBox.title","title":"<code>title()</code>","text":"<p>Get the title of the group box.</p> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>The title of the group box.</p> <p> </p>"},{"location":"QtWidgets/QHBoxLayout/","title":"QHBoxLayout","text":"<p>The <code>QHBoxLayout</code> class lines up widgets horizontally. If the widgets do not fit in the window, the layout will automatically wrap or resize them. For a vertical layout, use <code>QVBoxLayout</code>.</p> Methods <ul> <li><code>addLayout</code></li> </ul> <p></p> <p>Examples</p> <p><pre><code>layout = QtWidgets.QHBoxLayout()\nlayout.addWidget(QPushButton(\"Button 1\"))\nlayout.addWidget(QPushButton(\"Button 2\"))\n</code></pre> In the above example, a horizontal layout is created, and two buttons are added to it using the <code>addWidget</code> method from the parent <code>QLayout</code> parent class. The buttons will be aligned horizontally.</p> <p></p> <p><pre><code>h_layout = QtWidgets.QHBoxLayout()\nv_layout = QtWidgets.QVBoxLayout()\nh_layout.addLayout(v_layout)\n</code></pre> In the above example, a horizontal layout is created, added to a central widget, and a vertical layout is added to it.</p> <p></p>"},{"location":"QtWidgets/QHBoxLayout/#code.QtWidgets.QHBoxLayout.addLayout","title":"<code>addLayout(layout)</code>","text":"<p>Adds a layout to the horizontal box layout. The layout will be added to the right of the existing layouts.</p> <p>Parameters:</p> Name Type Description Default <code>layout</code> <code>QLayout</code> <p>the layout to add.</p> required <p> </p>"},{"location":"QtWidgets/QLabel/","title":"QLabel","text":"<p><code>QLabel</code> is used for displaying text or an image. No user interaction functionality is provided.</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>The text to display.</p> <code>None</code> Methods <ul> <li><code>setText</code></li> <li><code>text</code></li> </ul> <p></p> <p>Examples <pre><code>label = QtWidgets.QLabel(\"Hello World!\")\nprint(label.text())\n</code></pre> <code>'Hello World!'</code> <pre><code>label.setText(\"Goodbye World!\")\nprint(label.text())\n</code></pre> <code>'Goodbye World!'</code> </p> <p></p>"},{"location":"QtWidgets/QLabel/#code.QtWidgets.QLabel.setText","title":"<code>setText(text)</code>","text":"<p>Sets the label's text to the given text.</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>The text to set.</p> required <p></p>"},{"location":"QtWidgets/QLabel/#code.QtWidgets.QLabel.text","title":"<code>text()</code>","text":"<p>Returns the label's text.</p> <p>Returns:</p> Type Description <code>str</code> <p>The label's text.</p> <p> </p>"},{"location":"QtWidgets/QLayout/","title":"QLayout","text":"<p><code>QLayout</code> is the base class of all layout objects in PySide6.QtWidgets.</p> <p>Parameters:</p> Name Type Description Default <code>parent</code> <code>QWidget</code> <p>The parent widget of the layout.</p> <code>None</code> Methods <ul> <li><code>addWidget</code></li> <li><code>setSpacing</code></li> <li><code>spacing</code></li> </ul> <p></p> <p>Examples</p> <p><pre><code>yes_button = QtWidgets.QPushButton(\"press me\")\nno_button = QtWidgets.QPushButton(\"don't press me\")\n\n# QVBoxLayout is a subclass of QLayout\nlayout = QtWidgets.QVBoxLayout()\nlayout.addWidget(button)\nlayout.addWidget(no_button)\n</code></pre> In this example, we create two buttons and add them to <code>QVBoxLayout</code> layout. We can use the <code>addWidget</code> method because <code>QVBoxLayout</code> is a subclass of <code>QLayout</code>.</p> <p></p>"},{"location":"QtWidgets/QLayout/#code.QtWidgets.QLayout.addWidget","title":"<code>addWidget(w)</code>","text":"<p>Adds the widget <code>w</code> to the layout.</p> <p>Parameters:</p> Name Type Description Default <code>w</code> <code>QWidget</code> <p>The widget to add to the layout.</p> required <p></p>"},{"location":"QtWidgets/QLayout/#code.QtWidgets.QLayout.setSpacing","title":"<code>setSpacing(space)</code>","text":"<p>Sets the spacing between the items in the layout to <code>space</code>.</p> <p>Parameters:</p> Name Type Description Default <code>space</code> <code>int</code> <p>The spacing between the items in the layout.</p> required <p></p>"},{"location":"QtWidgets/QLayout/#code.QtWidgets.QLayout.spacing","title":"<code>spacing()</code>","text":"<p>Gets the spacing between the items in the layout.</p> <p>Returns:</p> Type Description <code>int</code> <p>The spacing between the items in the layout.</p> <p> </p>"},{"location":"QtWidgets/QLineEdit/","title":"QLineEdit","text":"<p><code>QLineEdit</code> is a widget that allows the user to enter and edit text. It provides a single line for the user to type in text.</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>The initial text to display in the line edit.</p> <code>None</code> Signals <ul> <li> <code>cursorPositionChanged</code>: Emitted when the cursor position changes.</li> <li> <code>editingFinished</code>: Emitted when the editing is finished.</li> <li> <code>returnPressed</code>: Emitted when the return key is pressed.</li> <li> <code>textChanged</code>: Emitted when the text changes.</li> <li> <code>textEdited</code>: Emitted when the text is edited.</li> </ul> Methods <ul> <li><code>text</code></li> <li><code>setText</code></li> <li><code>clear</code></li> <li><code>copy</code></li> <li><code>cut</code></li> <li><code>paste</code></li> <li><code>redo</code></li> <li><code>undo</code></li> <li><code>isModified</code></li> <li><code>isReadOnly</code></li> <li><code>setReadOnly</code></li> <li><code>PlaceholderText</code></li> <li><code>setPlaceholderText</code></li> <li><code>maxLength</code></li> <li><code>setMaxLength</code></li> </ul> <p></p> <p>Examples</p> <p><pre><code>line_edit = QtWidgets.QLineEdit(\"Enter text here\")\nprint(line_edit.text())\nprint(line_edit.isModified())\n</code></pre> <code>'Enter text here'</code> <code>False</code>  Now the user modifies the text in the line edit to <code>'New text'</code>. <pre><code>print(line_edit.modified())\nprint(line_edit.text())\n</code></pre> <code>True</code> <code>'New text'</code></p> <p></p>"},{"location":"QtWidgets/QLineEdit/#code.QtWidgets.QLineEdit.clear","title":"<code>clear()</code>","text":"<p>Clear the text in the line edit.</p> <p></p>"},{"location":"QtWidgets/QLineEdit/#code.QtWidgets.QLineEdit.copy","title":"<code>copy()</code>","text":"<p>Copy the selected text in the line edit to the clipboard.</p> <p></p>"},{"location":"QtWidgets/QLineEdit/#code.QtWidgets.QLineEdit.cut","title":"<code>cut()</code>","text":"<p>Cut the selected text in the line edit to the clipboard.</p> <p></p>"},{"location":"QtWidgets/QLineEdit/#code.QtWidgets.QLineEdit.isModified","title":"<code>isModified()</code>","text":"<p>Check if the text in the line edit has been modified by the user. <code>setText</code> resets the modified flag.</p> <p>Returns:</p> Type Description <code>bool</code> <p>True if the text has been modified, False otherwise.</p> <p></p>"},{"location":"QtWidgets/QLineEdit/#code.QtWidgets.QLineEdit.isReadOnly","title":"<code>isReadOnly()</code>","text":"<p>Check if the line edit is read-only.</p> <p>Returns:</p> Type Description <code>bool</code> <p>True if the line edit is read-only, False otherwise.</p> <p></p>"},{"location":"QtWidgets/QLineEdit/#code.QtWidgets.QLineEdit.maxLength","title":"<code>maxLength()</code>","text":"<p>Get the maximum length of the text in the line edit.</p> <p>Returns:</p> Type Description <code>int</code> <p>The maximum length of the text in the line edit.</p> <p></p>"},{"location":"QtWidgets/QLineEdit/#code.QtWidgets.QLineEdit.paste","title":"<code>paste()</code>","text":"<p>Paste the text from the clipboard to the line edit.</p> <p></p>"},{"location":"QtWidgets/QLineEdit/#code.QtWidgets.QLineEdit.placeholderText","title":"<code>placeholderText()</code>","text":"<p>Get the placeholder text displayed in the line edit when it is empty.</p> <p>Returns:</p> Type Description <code>str</code> <p>The placeholder text.</p> <p></p>"},{"location":"QtWidgets/QLineEdit/#code.QtWidgets.QLineEdit.redo","title":"<code>redo()</code>","text":"<p>Redo the last operation in the line edit.</p> <p></p>"},{"location":"QtWidgets/QLineEdit/#code.QtWidgets.QLineEdit.setMaxLength","title":"<code>setMaxLength(length)</code>","text":"<p>Set the maximum length of the text in the line edit.</p> <p>Parameters:</p> Name Type Description Default <code>length</code> <code>int</code> <p>The maximum length of the text in the line edit.</p> required <p></p>"},{"location":"QtWidgets/QLineEdit/#code.QtWidgets.QLineEdit.setPlaceholderText","title":"<code>setPlaceholderText(text)</code>","text":"<p>Set the placeholder text displayed in the line edit when it is empty. The placeholder text is displayed in gray.</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>The placeholder text.</p> required <p></p>"},{"location":"QtWidgets/QLineEdit/#code.QtWidgets.QLineEdit.setReadOnly","title":"<code>setReadOnly(read_only)</code>","text":"<p>Set the line edit to read-only. If the line edit is read-only, the user cannot edit the text.</p> <p>Parameters:</p> Name Type Description Default <code>read_only</code> <code>bool</code> <p>True to set the line edit to read-only, False otherwise.</p> required <p></p>"},{"location":"QtWidgets/QLineEdit/#code.QtWidgets.QLineEdit.setText","title":"<code>setText(text)</code>","text":"<p>Set the content of the line edit to the specified text.</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>The text to set in the line edit.</p> required <p></p>"},{"location":"QtWidgets/QLineEdit/#code.QtWidgets.QLineEdit.text","title":"<code>text()</code>","text":"<p>Get the text in the line edit.</p> <p>Returns:</p> Type Description <code>str</code> <p>The text in the line edit.</p> <p></p>"},{"location":"QtWidgets/QLineEdit/#code.QtWidgets.QLineEdit.undo","title":"<code>undo()</code>","text":"<p>Undo the last operation in the line edit.</p> <p> </p>"},{"location":"QtWidgets/QMainWindow/","title":"QMainWindow","text":"<p>A main window provides a framework for building an application's user interface. Every user interface must have a <code>QMainWindow</code> in PySide6. A <code>QMainWindow</code> must have a central widget, which is the main widget in the window. The central widget can be a <code>QWidget</code> or any other widget subclass. To this central widget, you can add other layouts, such as <code>QHBoxLayout</code> and <code>QVBoxLayout</code>.</p> Methods <ul> <li><code>setCentralWidget</code></li> <li><code>show</code></li> </ul> <p></p> <p>Examples <pre><code>class UserInterface(QtWidgets.QMainWindow):\n    def __init__(self):\n\n        # Call the QMainWindow __init__ method.\n        super().__init__()\n\n        # Set the central widget; every QMainWindow must have a central widget.\n        central_widget = QtWidgets.QWidget()\n        self.setCentralWidget(QWidget())\n\n        # Add a layout to the central widget.\n        layout = QtWidgets.QVBoxLayout(central_widget)\n\ndef main():\n\n    # Create the application object.\n    app = QtWidgets.QApplication()\n\n    # Create the main window, show it, and start the event loop.\n    window = UserInterface()\n    window.show()\n    app.exec()\n</code></pre>     In the above example, a simple user interface is created using the <code>QMainWindow</code> class.     We create a class called <code>UserInterface</code> that inherits from     <code>QMainWindow</code>. We then call the <code>__init__</code> method of the <code>QMainWindow</code> class using     the <code>super()</code> function. We then create a central widget and set it as the central     widget of the main window and add a layout to the central widget.     Finally, we create an instance of the <code>UserInterface</code> class, show the main window,     and start the application event loop.          Running the <code>main</code> function in the above code will display a window with a vertical layout.</p> <p></p>"},{"location":"QtWidgets/QMainWindow/#code.QtWidgets.QMainWindow.setCentralWidget","title":"<code>setCentralWidget(widget)</code>","text":"<p>Sets the given widget to be the main window's central widget.</p> <p>Parameters:</p> Name Type Description Default <code>widget</code> <code>QWidget</code> <p>The widget to set as the central widget.</p> required <p></p>"},{"location":"QtWidgets/QMainWindow/#code.QtWidgets.QMainWindow.show","title":"<code>show()</code>","text":"<p>Shows the main window.</p> <p> </p>"},{"location":"QtWidgets/QPushButton/","title":"QPushButton","text":"<p>The push button, or command button, is perhaps the most commonly used widget in any graphical user interface. Push (click) a button to command the computer to perform some action, or to answer a question. Typical buttons are OK, Apply, Cancel, Close, Yes, No and Help.</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>The text to display on the button.</p> <code>None</code> Signals <ul> <li><code>clicked</code>: Emitted when the button is clicked.</li> </ul> Methods <ul> <li><code>text</code></li> <li><code>setText</code></li> </ul> <p></p> <p>Examples <pre><code>button = QtWidgets.QPushButton(\"Click me!\")\nprint(button.text())\n</code></pre> <code>'Click me!'</code> <pre><code>button.setText(\"Don't click me!\")\nprint(button.text())\n</code></pre> <code>'Don't click me!'</code> </p> <p></p>"},{"location":"QtWidgets/QPushButton/#code.QtWidgets.QPushButton.text","title":"<code>text()</code>","text":"<p>Returns the text displayed in the button.</p> <p>Returns:</p> Type Description <code>str</code> <p>The text displayed in the button.</p> <p></p>"},{"location":"QtWidgets/QPushButton/#code.QtWidgets.QPushButton.setText","title":"<code>setText(text)</code>","text":"<p>Sets the text to be displayed in the button.</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>The text to display in the button.</p> required <p> </p>"},{"location":"QtWidgets/QSpinBox/","title":"QSpinBox","text":"<p><code>QSpinBox</code> is designed to handle integers and discrete sets of values. Use <code>QDoubleSpinBox</code> for floating point values. <code>QSpinBox</code> allows the user to choose a value by clicking the up and down buttons to increment or decrement the value displayed. The value can also be changed by typing in a value. The range of valid values and the number of decimal places shown is configurable.</p> Signals <ul> <li><code>valueChanged</code>: Emitted when the value in the spin box changes.</li> </ul> Methods <ul> <li><code>setMaximum</code></li> <li><code>setMinimum</code></li> <li><code>setSingleStep</code></li> <li><code>setValue</code></li> <li><code>value</code></li> <li><code>setRange</code></li> <li><code>setPrefix</code></li> <li><code>setSuffix</code></li> </ul> <p></p> <p>Examples <pre><code>spin_box = QtWidgets.QSpinBox()\nspin_box.setMaximum(100)\nspin_box.setMinimum(0)\nspin_box.setSingleStep(5)\nspin_box.setValue(50)\nprint(spin_box.value())\n</code></pre> <code>50</code> <pre><code>spin_box.setValue(200)\nprint(spin_box.value())\n</code></pre> <code>100</code> </p> <p></p>"},{"location":"QtWidgets/QSpinBox/#code.QtWidgets.QSpinBox.setMaximum","title":"<code>setMaximum(max)</code>","text":"<p>Set the maximum value of the spin box. The default maximum value is 99.</p> <p>Parameters:</p> Name Type Description Default <code>max</code> <code>int</code> <p>The maximum value of the spin box.</p> required <p></p>"},{"location":"QtWidgets/QSpinBox/#code.QtWidgets.QSpinBox.setMinimum","title":"<code>setMinimum(min)</code>","text":"<p>Set the minimum value of the spin box. The default minimum value is 0.</p> <p>Parameters:</p> Name Type Description Default <code>min</code> <code>int</code> <p>The minimum value of the spin box.</p> required <p></p>"},{"location":"QtWidgets/QSpinBox/#code.QtWidgets.QSpinBox.setPrefix","title":"<code>setPrefix(prefix)</code>","text":"<p>Set the prefix of the spin box. The prefix is displayed before the value in the spin box and is not editable by the user.</p> <p>Parameters:</p> Name Type Description Default <code>prefix</code> <code>str</code> <p>The prefix to set.</p> required <p></p>"},{"location":"QtWidgets/QSpinBox/#code.QtWidgets.QSpinBox.setRange","title":"<code>setRange(min, max)</code>","text":"<p>Set the minimum and maximum values of the spin box. If the current value is outside the new range, the value is adjusted to the nearest limit.</p> <p>Parameters:</p> Name Type Description Default <code>min</code> <code>int</code> <p>The new minimum value.</p> required <code>max</code> <code>int</code> <p>The new maximum value.</p> required <p></p>"},{"location":"QtWidgets/QSpinBox/#code.QtWidgets.QSpinBox.setSingleStep","title":"<code>setSingleStep(val)</code>","text":"<p>Set the value that the spin box will increment or decrement by when the up or down buttons are clicked. The default step value is 1. Setting a value less than 0 does nothing.</p> <p>Parameters:</p> Name Type Description Default <code>val</code> <code>int</code> <p>The value to increment or decrement by.</p> required <p></p>"},{"location":"QtWidgets/QSpinBox/#code.QtWidgets.QSpinBox.setSuffix","title":"<code>setSuffix(suffix)</code>","text":"<p>Set the suffix of the spin box. The suffix is displayed after the value in the spin box and is not editable by the user.</p> <p>Parameters:</p> Name Type Description Default <code>suffix</code> <code>str</code> <p>The suffix to set.</p> required <p></p>"},{"location":"QtWidgets/QSpinBox/#code.QtWidgets.QSpinBox.setValue","title":"<code>setValue(val)</code>","text":"<p>Set the value of the spin box. If the value is outside the range of the spin box, the value is adjusted to the nearest limit.</p> <p>Parameters:</p> Name Type Description Default <code>val</code> <code>int</code> <p>The value to set the spin box to.</p> required <p></p>"},{"location":"QtWidgets/QSpinBox/#code.QtWidgets.QSpinBox.value","title":"<code>value()</code>","text":"<p>Returns the current value of the spin box.</p> <p>Returns:</p> Type Description <code>int</code> <p>The current value of the spin box.</p> <p> </p>"},{"location":"QtWidgets/QTextEdit/","title":"QTextEdit","text":"<p><code>QTextEdit</code> is an advanced text editor that provides a rich text display and editing features. It can be used to display and edit formatted text, such as HTML and Markdown.</p> Signals <ul> <li><code>cursorPositionChanged</code>: Emitted when the cursor position changes.</li> <li><code>textChanged</code>: Emitted when the text changes.</li> </ul> Methods <ul> <li><code>clear</code></li> <li><code>copy</code></li> <li><code>paste</code></li> <li><code>redo</code></li> <li><code>undo</code></li> <li><code>cut</code></li> <li><code>append</code></li> <li><code>setPlaceholderText</code></li> <li><code>placeholderText</code></li> <li><code>setReadOnly</code></li> <li><code>isReadOnly</code></li> <li><code>setFontItalic</code></li> <li><code>setFontUnderline</code></li> <li><code>setFontWeight</code></li> <li><code>setFontPointSize</code></li> <li><code>setText</code></li> <li><code>toHtml</code></li> <li><code>setMarkdown</code></li> <li><code>toPlainText</code></li> <li><code>toHtml</code></li> <li><code>toMarkdown</code></li> <li><code>zoomIn</code></li> <li><code>zoomOut</code></li> </ul> <p></p> <p>Examples</p> <p><pre><code>text_edit = QtWidgets.QTextEdit()\ntext_edit.setHtml(\"&lt;b&gt;Hello, World!&lt;/b&gt;\")\n\nprint(text_edit.toPlainText())\nprint(text_edit.toHtml())\n</code></pre> <code>Hello, World!</code> <code>&lt;b&gt;Hello, World!&lt;/b&gt;</code> <pre><code>text_edit.setMarkdown(\"**Hello, World!**\")\n\nprint(text_edit.toPlainText())\nprint(text_edit.Markdown())\n</code></pre> <code>Hello, World!</code> <code>**Hello, World!**</code>  The above code shows how to set the text of a <code>QTextEdit</code> widget using HTML and Markdown and how to get the text in plain text, HTML, and Markdown formats.</p> <p></p>"},{"location":"QtWidgets/QTextEdit/#code.QtWidgets.QTextEdit.append","title":"<code>append(text)</code>","text":"<p>Append text to the end of the text edit.</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>The text to append.</p> required <p></p>"},{"location":"QtWidgets/QTextEdit/#code.QtWidgets.QTextEdit.clear","title":"<code>clear()</code>","text":"<p>Clear the text in the text edit.</p> <p></p>"},{"location":"QtWidgets/QTextEdit/#code.QtWidgets.QTextEdit.copy","title":"<code>copy()</code>","text":"<p>Copiy any selected text to the clipboard.</p> <p></p>"},{"location":"QtWidgets/QTextEdit/#code.QtWidgets.QTextEdit.cut","title":"<code>cut()</code>","text":"<p>Cut any selected text to the clipboard.</p> <p></p>"},{"location":"QtWidgets/QTextEdit/#code.QtWidgets.QTextEdit.isReadOnly","title":"<code>isReadOnly()</code>","text":"<p>Check if the text edit is read-only.</p> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if the text edit is read-only, False otherwise.</p> <p></p>"},{"location":"QtWidgets/QTextEdit/#code.QtWidgets.QTextEdit.paste","title":"<code>paste()</code>","text":"<p>Paste text from the clipboard into the text edit.</p> <p></p>"},{"location":"QtWidgets/QTextEdit/#code.QtWidgets.QTextEdit.placeholderText","title":"<code>placeholderText()</code>","text":"<p>Get the placeholder text of the text edit.</p> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>The placeholder text of the text edit.</p> <p></p>"},{"location":"QtWidgets/QTextEdit/#code.QtWidgets.QTextEdit.redo","title":"<code>redo()</code>","text":"<p>Redo the last operation.</p> <p></p>"},{"location":"QtWidgets/QTextEdit/#code.QtWidgets.QTextEdit.setFontItalic","title":"<code>setFontItalic(b)</code>","text":"<p>Set the italic font style of the text edit. All text added to the text edit after a call with <code>True</code> will be displayed in italic.</p> <p>Parameters:</p> Name Type Description Default <code>b</code> <code>bool</code> <p>True to set the font style to italic, False otherwise.</p> required <p></p>"},{"location":"QtWidgets/QTextEdit/#code.QtWidgets.QTextEdit.setFontPointSize","title":"<code>setFontPointSize(s)</code>","text":"<p>Set the font size of the text edit. All text added to the text edit after a call with a specific size will be displayed with that size.</p> <p>Parameters:</p> Name Type Description Default <code>s</code> <code>float</code> <p>The font size to set.</p> required <p></p>"},{"location":"QtWidgets/QTextEdit/#code.QtWidgets.QTextEdit.setFontUnderline","title":"<code>setFontUnderline(b)</code>","text":"<p>Set the underline font style of the text edit. All text added to the text edit after a call with <code>True</code> will be displayed with an underline.</p> <p>Parameters:</p> Name Type Description Default <code>b</code> <code>bool</code> <p>True to set the font style to underline, False otherwise.</p> required <p></p>"},{"location":"QtWidgets/QTextEdit/#code.QtWidgets.QTextEdit.setFontWeight","title":"<code>setFontWeight(w)</code>","text":"<p>Set the font weight of the text edit. Font weight is a numerical value that determines the thickness of the characters in the text edit. All text added to the text edit after a call with a specific weight will be displayed with that weight.</p> <p>Parameters:</p> Name Type Description Default <code>w</code> <code>int</code> <p>The font weight to set.</p> required <p></p>"},{"location":"QtWidgets/QTextEdit/#code.QtWidgets.QTextEdit.setHtml","title":"<code>setHtml(text)</code>","text":"<p>Set the text edit contents to the specified HTML text.</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>The HTML text to set.</p> required <p></p>"},{"location":"QtWidgets/QTextEdit/#code.QtWidgets.QTextEdit.setMarkdown","title":"<code>setMarkdown(markdown)</code>","text":"<p>Set the text edit contents to the specified Markdown text.</p> <p>Parameters:</p> Name Type Description Default <code>markdown</code> <code>str</code> <p>The Markdown text to set.</p> required <p></p>"},{"location":"QtWidgets/QTextEdit/#code.QtWidgets.QTextEdit.setPlaceholderText","title":"<code>setPlaceholderText(placeholderText)</code>","text":"<p>Set the placeholder text of the text edit. Placeholder text is grayed out and displayed when the text edit is empty.</p> <p>Parameters:</p> Name Type Description Default <code>placeholderText</code> <code>str</code> <p>The placeholder text to set.</p> required <p></p>"},{"location":"QtWidgets/QTextEdit/#code.QtWidgets.QTextEdit.setReadOnly","title":"<code>setReadOnly(ro)</code>","text":"<p>Set whether the text edit is read-only. If the text edit is read-only, the user cannot edit the text.</p> <p>Parameters:</p> Name Type Description Default <code>ro</code> <code>bool</code> <p>True to set the text edit to read-only, False otherwise.</p> required <p></p>"},{"location":"QtWidgets/QTextEdit/#code.QtWidgets.QTextEdit.setText","title":"<code>setText(text)</code>","text":"<p>Set the contents of the text edit to the specified text. The text is displayed as plain text.</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>The text to set.</p> required <p></p>"},{"location":"QtWidgets/QTextEdit/#code.QtWidgets.QTextEdit.toHtml","title":"<code>toHtml()</code>","text":"<p>Get the text edit contents as HTML text.</p> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>The text edit contents as HTML text.</p> <p></p>"},{"location":"QtWidgets/QTextEdit/#code.QtWidgets.QTextEdit.toMarkdown","title":"<code>toMarkdown()</code>","text":"<p>Get the text edit contents as Markdown text.</p> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>The text edit contents as Markdown text.</p> <p></p>"},{"location":"QtWidgets/QTextEdit/#code.QtWidgets.QTextEdit.toPlainText","title":"<code>toPlainText()</code>","text":"<p>Get the text edit contents as plain text. For example if the text edit contains the HTML text <code>&lt;b&gt;bold&lt;/b&gt;</code>, the returned text will be <code>bold</code>.</p> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>The text edit contents as plain text.</p> <p></p>"},{"location":"QtWidgets/QTextEdit/#code.QtWidgets.QTextEdit.undo","title":"<code>undo()</code>","text":"<p>Undo the last operation in the text edit.</p> <p></p>"},{"location":"QtWidgets/QTextEdit/#code.QtWidgets.QTextEdit.zoomIn","title":"<code>zoomIn(r)</code>","text":"<p>Zoom in the text edit by the specified range.</p> <p>Parameters:</p> Name Type Description Default <code>r</code> <code>int</code> <p>The range to zoom in by.</p> required <p></p>"},{"location":"QtWidgets/QTextEdit/#code.QtWidgets.QTextEdit.zoomOut","title":"<code>zoomOut(r)</code>","text":"<p>Zoom out the text edit by the specified range.</p> <p>Parameters:</p> Name Type Description Default <code>r</code> <code>int</code> <p>The range to zoom out by.</p> required <p> </p>"},{"location":"QtWidgets/QVBoxLayout/","title":"QVBoxLayout","text":"<p>The <code>QVBoxLayout</code> class lines up widgets vertically. If the widgets do not fit in the window, the layout will automatically wrap or resize them. For a horizontal layout, see <code>QHBoxLayout</code>.</p> Methods <ul> <li><code>addLayout</code></li> </ul> <p></p> <p>Examples</p> <p><pre><code>vbox = QtWidgets.QVBoxLayout()\ntextedit = QtWidgets.QTextEdit()\nvbox.addWidget(textedit)\n</code></pre> In the above example, a vertical layout is created and a <code>QTextEdit</code> widget is added to it using the <code>addWidget</code> method from the parent class <code>QLayout</code>.</p> <p></p> <p><pre><code>vbox = QtWidgets.QVBoxLayout()\nhbox = QtWidgets.QHBoxLayout()\nvbox.addLayout(hbox)\n</code></pre> In the above example, a vertical layout is created and a horizontal layout is added to it.</p> <p></p>"},{"location":"QtWidgets/QVBoxLayout/#code.QtWidgets.QVBoxLayout.addLayout","title":"<code>addLayout(layout)</code>","text":"<p>Adds a layout to the vertical box layout. The layout will be added below the existing layouts.</p> <p>Parameters:</p> Name Type Description Default <code>layout</code> <code>QLayout</code> <p>the layout to add</p> required <p> </p>"},{"location":"QtWidgets/QWidget/","title":"QWidget","text":"<p>The <code>QWidget</code> class is the base class of all user interface objects in PySide6.QtWidgets.</p> <p>Parameters:</p> Name Type Description Default <code>parent</code> <code>QWidget</code> <p>The parent widget of this widget.</p> <code>None</code> Methods <ul> <li><code>resize</code></li> <li><code>setLayout</code></li> <li><code>show</code></li> </ul> <p></p> <p>Examples</p> <p><pre><code>widget = QtWidgets.QWidget()\nwidget.resize(250, 150)\n\n# QPushButton is a subclass of QWidget\nbutton = QtWidgets.QPushButton(\"press me\")\nbutton.resize(100, 50)\n</code></pre> In the above code we show that we can apply the <code>resize</code> method to all widgets that inherit from <code>QWidget</code> such as <code>QPushButton</code>. Another example with <code>QMainWindow</code> is shown below:</p> <pre><code># QApplication is required to run the application\napp = QtWidgets.QApplication()\n\n# QMainWindow is a subclass of QWidget\nwindow = QtWidgets.QMainWindow()\nwindow.resize(500, 300)\n\n# Displays an empty window with a size of 500x300 pixels\nwindow.show()\napp.exec()\n</code></pre> <p> The following example shows two methods to set a layout manager for a <code>QWidget</code>. The two methods are equivalent. <pre><code># Create a main window with a central widget\nwindow = QtWidgets.QMainWindow()\nwidget = QtWidgets.QWidget()\nwindow.setCentralWidget(widget)\n\n# method 1\nlayout = QtWidgets.QVBoxLayout()\nwidget.setLayout(layout)\n\n# method 2\nlayout = QtWidgets.QVBoxLayout(widget)\n</code></pre></p> <p></p>"},{"location":"QtWidgets/QWidget/#code.QtWidgets.QWidget.resize","title":"<code>resize(w, h)</code>","text":"<p>Resizes the widget to have a width of <code>w</code> pixels and a height of <code>h</code> pixels.</p> <p>Parameters:</p> Name Type Description Default <code>w</code> <code>int</code> <p>The width of the widget in pixels.</p> required <code>h</code> <code>int</code> <p>The height of the widget in pixels.</p> required <p></p>"},{"location":"QtWidgets/QWidget/#code.QtWidgets.QWidget.setLayout","title":"<code>setLayout(layout)</code>","text":"<p>Sets the layout manager for this widget. An alternative to calling this function is to pass this widget to the layout's constructor, as shown in the last example above.</p> <p>Parameters:</p> Name Type Description Default <code>layout</code> <code>QLayout</code> <p>The layout manager to set for this widget.</p> required <p></p>"},{"location":"QtWidgets/QWidget/#code.QtWidgets.QWidget.show","title":"<code>show()</code>","text":"<p>Shows the widget and its child widgets.</p> <p> </p>"},{"location":"tutorial/","title":"Introduction","text":"<p>In this tutorial, we will cover the steps to create a simple GUI (Graphical User Interface) application using PySide6. We will create a simple window with a button and a label. When the button is clicked, the label will display a message. First, it is necessary to install PySide6. Installation instructions can be found here. </p> <p>For this tutorial, we will only use the widgets inherited from the <code>QtWidgets</code>  class and the <code>Slot</code> class from the <code>QtCore</code> module. As a starting point let's create a new Python file <code>simple_gui.py</code> and import the necessary modules:</p> simple_gui.py<pre><code>from PySide6 import QtWidgets\nfrom PySide6.QtCore import Slot\n</code></pre> <p><code>QtWidgets</code> contains all the classes that provide a set of elements to create a graphical user interface, such as buttons, labels and layouts. Some of the most common classes from <code>QtWidgets</code> are documented in the API reference. We will use the import statements above as a starting point for our code and build upon it. We will build <code>simple_gui.py</code> in three steps:</p> <ul> <li>1. Create an empty window </li> <li>2. Add the button and label widgets to the window </li> <li>3. Connect the button to a function that changes the label text </li> </ul> <p>Note</p> <p>Code snippets in this tutorial are added to <code>simple_gui.py</code> in every step. The final code can be found at the end of the tutorial. Code snippets that are added to the script will be highlighted in the code block like this: example.py<pre><code># This code was already in example.py\nmessage = \"muhahahaha\"\n\n# This code is added to example.py in this step\nprint(message)\n</code></pre></p> <p>Note</p> <p>After every one of the three steps, the progress in the GUI will be shown (i.e. the result of running <code>simple_gui.py</code>). The window that is displayed may look slightly different depending on your operating system. The screenshots in this tutorial were taken on a Windows  machine.</p> <p></p>"},{"location":"tutorial/adding_widgets_to_a_window/","title":"2. Adding widgets to a window","text":"<p>To add widgets to the window, we need to create the widgets and set their properties. In this case, we will first add a central widget to the window, then add a layout to the central widget, and finally add a button and a label to the layout.</p>"},{"location":"tutorial/adding_widgets_to_a_window/#adding-a-layout","title":"Adding a layout","text":"<p>First we need to keep in mind that every <code>QMainWindow</code> has to have a central widget. This usually is a generic <code>QWidget</code> object. Next, we will add a layout to the central widget. A layout is a container that manages the position of child widgets. In this case, we will use a <code>QVBoxLayout</code> ('V' for 'vertical') to manage the position of widgets in our window. The newly added code is highlighted below:</p> simple_gui.py<pre><code>from PySide6 import QtWidgets\nfrom PySide6.QtCore import Slot\n\n\napp = QtWidgets.QApplication()\nwindow = QtWidgets.QMainWindow()\n\n# Setting the central widget \ncentral_widget = QtWidgets.QWidget()\nwindow.setCentralWidget(central_widget)\n\n# Adding a layout to the central widget\nvbox = QtWidgets.QVBoxLayout()\ncentral_widget.setLayout(vbox)\n\nwindow.show()\napp.exec()\n</code></pre> <p>Running the code above will still show an empty window, as we have added an empty layout to the window. Next, we will add widgets to this layout.</p>"},{"location":"tutorial/adding_widgets_to_a_window/#adding-widgets-to-the-layout","title":"Adding widgets to the layout","text":"<p>We can create a button using the <code>QPushButton</code> class and a label using the <code>QLabel</code> class as follows:</p> <pre><code>button = QtWidgets.QPushButton()\nbutton.setText(\"Click me!\")\n\nlabel = QtWidgets.QLabel()\nlabel.setText(\"Hello, PySide6!\")\n</code></pre> <p>If we simply add the above code to <code>simple_gui.py</code>, the button and label will not be visible. This is because we have not added them to the layout. To add the button and label to the layout, we can use the <code>addWidget()</code> method of the layout:</p> <pre><code>vbox.addWidget(button)  \nvbox.addWidget(label)\n</code></pre> <p>Let's add this code to <code>simple_gui.py</code> and see how the window looks:</p> simple_gui.py<pre><code>from PySide6 import QtWidgets\nfrom PySide6.QtCore import Slot\n\n\napp = QtWidgets.QApplication()\nwindow = QtWidgets.QMainWindow()\n\n# Setting the central widget \ncentral_widget = QtWidgets.QWidget()\nwindow.setCentralWidget(central_widget)\n\n# Adding a layout to the central widget\nvbox = QtWidgets.QVBoxLayout()\ncentral_widget.setLayout(vbox)\n\n# Creating a button and a label\nlabel = QtWidgets.QLabel()\nlabel.setText(\"Hello, User! Please click the button.\")\nbutton = QtWidgets.QPushButton()\nbutton.setText(\"Click me!\")\n\n# Adding the button and label to the layout\nvbox.addWidget(label)\nvbox.addWidget(button)\n\nwindow.show()\napp.exec()\n</code></pre> <p>Running the above code will show a window with a label with a button that does absolutely nothing when clicked (which we will fix in the next step ).</p> <p></p>"},{"location":"tutorial/connecting_widgets_to_a_function/","title":"3. Connecting widgets to a function","text":"<p>To make a widget interactive, you need to connect it to a function. In PySide6 this is done using a signal-slot mechanism. A signal is emitted when a particular event occurs, and a slot is a function that is called in response to the signal. In PySide6, you can connect a signal to a slot using the <code>connect</code> method of the signal object. </p>"},{"location":"tutorial/connecting_widgets_to_a_function/#creating-a-slot-function","title":"Creating a slot function","text":"<p>The slot function doesn't take any arguments. To handle this, we can group all the widgets together with all slot functions in a single class. This way, we can access the widgets inside the slot function through the <code>self</code> reference. Assuming that the following code is inside a class in which a <code>QLabel</code> widget is defined as <code>self.label</code>, we can define a slot function as follows:</p> <pre><code>@Slot()\ndef change_label_text(self):\n    self.label.setText(\"Hello, PySide6!\")\n</code></pre> <p>In the code above, we use the <code>@Slot()</code> decorator to indicate that the function is a slot. So, if we want to connect this slot function to the signal of the <code>QPushButton</code> in our <code>simple_gui.py</code> file, we first need to change up our code quite a bit. We can put all the code in a class that inherits from <code>QMainWindow</code> and let's call it <code>UserInterface</code>: </p> Without classWith class simple_gui.py<pre><code>from PySide6 import QtWidgets\nfrom PySide6.QtCore import Slot\n\n\napp = QtWidgets.QApplication()\nwindow = QtWidgets.QMainWindow()\n\n# Setting the central widget \ncentral_widget = QtWidgets.QWidget()\nwindow.setCentralWidget(central_widget)\n\n# Adding a layout to the central widget\nvbox = QtWidgets.QVBoxLayout()\ncentral_widget.setLayout(vbox)\n\n# Creating a button and a label\nlabel = QtWidgets.QLabel()\nlabel.setText(\"Hello, User! Please click the button.\")\nbutton = QtWidgets.QPushButton()\nbutton.setText(\"Click me!\")\n\n# Adding the button and label to the layout\nvbox.addWidget(label)\nvbox.addWidget(button)\n\nwindow.show()\napp.exec()\n</code></pre> simple_gui.py<pre><code>from PySide6 import QtWidgets\nfrom PySide6.QtCore import Slot\n\n\nclass UserInterface(QtWidgets.QMainWindow):\n    def __init__(self):\n        super().__init__() # (1)\n\n        # Setting the central widget \n        central_widget = QtWidgets.QWidget()\n        self.setCentralWidget(central_widget) # (2)\n\n        # Adding a layout to the central widget\n        vbox = QtWidgets.QVBoxLayout()\n        central_widget.setLayout(vbox)\n\n        # Creating a button and a label\n        self.label = QtWidgets.QLabel() \n        self.label.setText(\"Hello, User! Please click the button.\") # (3)\n        button = QtWidgets.QPushButton()\n        button.setText(\"Click me!\")\n\n        # Adding the button and label to the layout\n        vbox.addWidget(self.label)\n        vbox.addWidget(button)\n\n\nif __name__ == \"__main__\": # (4)\n    app = QtWidgets.QApplication() \n    window = UserInterface() # (5)\n    window.show()\n    app.exec()\n</code></pre> <ol> <li>With this line of code, we call the <code>__init__</code> method of the parent class <code>QMainWindow</code>. In the without class case, we do this implicitly when we create the <code>QMainWindow</code> object:  <pre><code>window = QtWidgets.QMainWindow()\n</code></pre></li> <li>In this case, we use the <code>self</code> reference to access the <code>QMainWindow</code> object. The equivalent line in the without class case is: <pre><code>window.setCentralWidget(central_widget)\n</code></pre></li> <li>We give the <code>Qlabel</code> to the <code>self</code> reference so that we can access it in slot functions, which we will add later. The equivalent lines in the without class case are: <pre><code>label = QtWidgets.QLabel()\nlabel.setText(\"Hello, User! Please click the button.\")\n</code></pre></li> <li> <p>We only execute the code if the script is run as the main program, not as an imported module. This is a common Python idiom .</p> </li> <li> <p>Equivalent lines in the without class case are: <pre><code>app = QtWidgets.QApplication()\nwindow = QtWidgets.QMainWindow()\n</code></pre></p> </li> </ol> <p>In the code above the changes made to <code>simple_gui.py</code> are highlighted. Press the  buttons for more information about specific lines of code.</p>"},{"location":"tutorial/connecting_widgets_to_a_function/#connecting-the-slot-function-to-a-widget","title":"Connecting the slot function to a widget","text":"<p>Now we can connect a slot function to the signal of a widget. Some relevant signals of <code>QWidgets</code> are mentioned in the API reference. We can for example connect the <code>CurrentTextChanged</code> signal of a <code>QComboBox</code> to a slot function as follows:</p> <pre><code>combobox = QtWidgets.QComboBox()\ncombobox.currentTextChanged.connect(do_something)\n</code></pre> <p>In the code above is assumed the the <code>do_something</code> slot function is defined in the same scope as the <code>combobox</code> object. In the same way, we can connect the <code>clicked</code> signal of a <code>QPushButton</code> to the <code>change_label_text</code> slot function in <code>simple_gui.py</code>:</p> simple_gui.py<pre><code>from PySide6 import QtWidgets\nfrom PySide6.QtCore import Slot\n\n\nclass UserInterface(QtWidgets.QMainWindow):\n    def __init__(self):\n        super().__init__()\n\n        # Setting the central widget \n        central_widget = QtWidgets.QWidget()\n        self.setCentralWidget(central_widget)\n\n        # Adding a layout to the central widget\n        vbox = QtWidgets.QVBoxLayout()\n        central_widget.setLayout(vbox)\n\n        # Creating a button and a label\n        self.label = QtWidgets.QLabel() \n        self.label.setText(\"Hello, User! Please click the button.\")\n        button = QtWidgets.QPushButton()\n        button.setText(\"Click me!\")\n\n        # Adding the button and label to the layout\n        vbox.addWidget(self.label)\n        vbox.addWidget(button)\n\n        # Connecting the button to the slot function\n        button.clicked.connect(self.change_label_text)\n\n    @Slot()\n    def change_label_text(self):\n        self.label.setText(\"Hello, PySide6!\")\n\n\nif __name__ == \"__main__\":\n    app = QtWidgets.QApplication() \n    window = UserInterface() \n    window.show()\n    app.exec()\n</code></pre>"},{"location":"tutorial/connecting_widgets_to_a_function/#final-result","title":"Final Result","text":"<p>That's it ! You have succesfully created your first interactive GUI application using PySide6  . The final result of running <code>simple_gui.py</code> is shown below:</p> Before clickAfter click <p></p> <p></p> <p></p>"},{"location":"tutorial/creating_a_simple_window/","title":"1. Creating a simple window","text":"<p>To create an empty window, we need two ingredients: a <code>QApplication</code> object and a <code>QMainWindow</code> object. The <code>QApplication</code> object manages the GUI application's control flow and main settings, while the <code>QMainWindow</code> object provides the framework for building an application's user interface. </p> simple_gui.py<pre><code>from PySide6 import QtWidgets\nfrom PySide6.QtCore import Slot\n\n\napp = QtWidgets.QApplication()\nwindow = QtWidgets.QMainWindow()\nwindow.show()\napp.exec()\n</code></pre> <p>The code above creates an empty window. The <code>show()</code> method displays the window, and the <code>exec()</code> method starts the application's event loop. The event loop is a loop that waits for events to happen and then dispatches them to the appropriate event handlers. Examples of events are clicking on buttons in your application or typing text into a text field. Adding the above code to the script will show an empty window:</p> <p></p> <p></p>"}]}