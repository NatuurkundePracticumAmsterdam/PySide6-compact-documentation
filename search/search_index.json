{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Pyside6 Compact Documentation This PySide6 documentation is compact, focused on beginners, and while not complete, it is clear and explanatory. PySide6 is the official Python module from the Qt for Python project, which provides access to the complete Qt 6.0+ framework. For the full Pyside6 documentation , checkout the Qt for Python docs . ul { padding-left: 50px; } li { padding: 2px 0 } .font-title { font-size: 24px; color: #dd2e5b; display: block; padding-bottom: 10px; } .font-item { font-size: 16px; } ul li::marker { font-size: 20px; /* Adjust the size */ color: #dd2e5b; /* Optional: change the color */ } td { padding-right: 1px; /* Adjust horizontal space between columns */ } Getting started Install Pyside6 Getting started Documentation User guide API reference","title":"Home"},{"location":"API_reference/","text":"API Reference This page contains the API documentation of the PySide6.QtWidgets module. QCheckBox A QCheckBox widget is a toggle button that can be checked or unchecked. Checkboxes are typically used to represent features in an application that can be enabled or disabled without affecting others. By default, a checkbox is unchecked. Examples: >>> checkbox = QCheckBox () >>> checkbox . isChecked () False >>> checkbox . setChecked ( True ) >>> checkbox . isChecked () True IsChecked () Returns True if the checkbox is checked; otherwise returns False. Returns: Type Description bool True if the checkbox is checked; otherwise False. setChecked ( checked ) Sets the checkbox to be checked if checked is True; otherwise sets it to be unchecked. Parameters: Name Type Description Default checked bool True to check the checkbox; otherwise False. required QComboBox A QComboBox is a button that provides a list of options to the user when clicked. Examples: >>> combo = QComboBox () >>> combo . addItem ( \"Option 1\" ) >>> combo . addItems ( \"[Option 2, Option 3]\" ) >>> combo . currentText () 'Option 1' >>> combo . currentIndex () '0' >>> combo . setCurrentIndex ( 2 ) >>> combo . currentText () 'Option 3' >>> combo . clear () >>> combo . currentText () '' >>> combo . currentIndex () '-1' addItem ( text ) Adds an item to the combo box with the given text. Parameters: Name Type Description Default text str The text to display in the combo box. required addItems ( texts ) Adds the items in the list texts to the combo box. Parameters: Name Type Description Default texts Sequence [ str ] The list of strings to add to the combo box. required clear () Clears the contents of the combo box, removing all items. currentIndex () Gets the index of the currently selected item in the combo box. For an empty combo box, returns -1. The current index can change when inserting or removing items. Returns: Type Description int The index of the currently selected item. currentText () Gets the text of the currently selected item in the combo box. For an empty combo box, returns an empty string. Returns: Type Description str The text of the currently selected item. removeItem ( index ) Removes the item at the given index from the combo box. Parameters: Name Type Description Default index int The index of the item to remove. required setCurrentIndex ( index ) Sets the current index of the combo box to the given index. Parameters: Name Type Description Default index int The index of the item to set as the current item. required setCurrentText ( text ) Sets the current text of the combo box to the given text. Parameters: Name Type Description Default text str The text to set as the current text. required QDoubleSpinBox QDoubleSpinBox is designed to handle double values. For integers, use QSpinBox. QDoubleSpinBox allows the user to choose a value by clicking the up and down buttons to increment or decrement the value displayed. The value can also be changed by typing in a value. The range of valid values and the number of decimal places shown is configurable. Examples: >>> spin_box = QDoubleSpinBox () >>> spin_box . setMaximum ( 100 ) >>> spin_box . setMinimum ( 0 ) >>> spin_box . setSingleStep ( 0.1 ) >>> spin_box . setValue ( 50 ) >>> spin_box . value () 50.0 >>> spin_box . setValue ( 200 ) >>> spin_box . value () 100.0 setMaximum ( max ) Sets the maximum value of the spin box. The default maximum value is 99.99. Parameters: Name Type Description Default max float The new maximum value. required setMinimum ( min ) Sets the minimum value of the spin box. The default minimum value is 0.0. Parameters: Name Type Description Default min float The new minimum value. required setSingleStep ( val ) Sets the value that the spin box will increment or decrement by when the up or down buttons are clicked. The default step value is 1.0. Setting a singleStep value of less than 0 does nothing. Parameters: Name Type Description Default val float The new step value. required setValue ( val ) Sets the value of the spin box. If the value is outside the range of the spin box, the value is adjusted to the nearest limit. Parameters: Name Type Description Default val float The new value. required value () Returns the value of the spin box. Returns: Type Description float The value of the spin box. QFormLayout summary Parameters: Name Type Description Default PySide6 _type_ description required QGroupBox summary Parameters: Name Type Description Default PySide6 _type_ description required QHBoxLayout summary Parameters: Name Type Description Default PySide6 _type_ description required QLabel QLabel is used for displaying text or an image. No user interaction functionality is provided. Examples: >>> label = QLabel () >>> label . setText ( \"Hello World!\" ) >>> label . text () 'Hello World!' setText ( text ) Sets the label's text to the given text. Parameters: Name Type Description Default text str The text to set. required text () Returns the label's text. Returns: Type Description str The label's text. QMainWindow summary Parameters: Name Type Description Default PySide6 _type_ description required QPushButton The push button, or command button, is perhaps the most commonly used widget in any graphical user interface. Push (click) a button to command the computer to perform some action, or to answer a question. Typical buttons are OK, Apply, Cancel, Close, Yes, No and Help. setText ( text ) Sets the text to be displayed in the button. Parameters: Name Type Description Default text str The text to display in the button. required QSpinBox QSpinBox is designed to handle integers and discrete sets of values. Use QDoubleSpinBox for floating point values. QSpinBox allows the user to choose a value by clicking the up and down buttons to increment or decrement the value displayed. The value can also be changed by typing in a value. The range of valid values and the number of decimal places shown is configurable. Examples: >>> spin_box = QSpinBox () >>> spin_box . setMaximum ( 100 ) >>> spin_box . setMinimum ( 0 ) >>> spin_box . setSingleStep ( 5 ) >>> spin_box . setValue ( 50 ) >>> spin_box . value () 50 >>> spin_box . setValue ( 200 ) >>> spin_box . value () 100 setMaximum ( max ) Sets the maximum value of the spin box. The default maximum value is 99. Parameters: Name Type Description Default max int The maximum value of the spin box. required setMinimum ( min ) Sets the minimum value of the spin box. The default minimum value is 0. Parameters: Name Type Description Default min int The minimum value of the spin box. required setSingleStep ( val ) Sets the value that the spin box will increment or decrement by when the up or down buttons are clicked. The default step value is 1. Setting a value less than 0 does nothing. Parameters: Name Type Description Default val int The value to increment or decrement by. required setValue ( val ) Sets the value of the spin box. If the value is outside the range of the spin box, the value is adjusted to the nearest limit. Parameters: Name Type Description Default val int The value to set the spin box to. required value () Returns the current value of the spin box. Returns: Type Description int The current value of the spin box. QTextEdit summary Parameters: Name Type Description Default PySide6 _type_ description required QVBoxLayout Create a vertical box to which widgets can be added. Layouts can be added to other layouts. Examples: >>> vbox = QVBoxLayout () >>> textedit = QTextEdit () >>> vbox . addWidget ( textedit ) >>> vbox = QVBoxLayout () >>> hbox = QHBoxLayout () >>> vbox . addLayout ( hbox ) addLayout ( layout ) Adds a layout to the vertical box layout Parameters: Name Type Description Default Layout QBoxLayout Layout required addWidget ( widget ) Adds a widget to the vertical box layout Parameters: Name Type Description Default widget QWidget Widget required","title":"API Reference"},{"location":"API_reference/#api-reference","text":"This page contains the API documentation of the PySide6.QtWidgets module.","title":"API Reference"},{"location":"API_reference/#QtWidgets.QCheckBox","text":"A QCheckBox widget is a toggle button that can be checked or unchecked. Checkboxes are typically used to represent features in an application that can be enabled or disabled without affecting others. By default, a checkbox is unchecked. Examples: >>> checkbox = QCheckBox () >>> checkbox . isChecked () False >>> checkbox . setChecked ( True ) >>> checkbox . isChecked () True","title":"QCheckBox"},{"location":"API_reference/#QtWidgets.QCheckBox.IsChecked","text":"Returns True if the checkbox is checked; otherwise returns False. Returns: Type Description bool True if the checkbox is checked; otherwise False.","title":"IsChecked"},{"location":"API_reference/#QtWidgets.QCheckBox.setChecked","text":"Sets the checkbox to be checked if checked is True; otherwise sets it to be unchecked. Parameters: Name Type Description Default checked bool True to check the checkbox; otherwise False. required","title":"setChecked"},{"location":"API_reference/#QtWidgets.QComboBox","text":"A QComboBox is a button that provides a list of options to the user when clicked. Examples: >>> combo = QComboBox () >>> combo . addItem ( \"Option 1\" ) >>> combo . addItems ( \"[Option 2, Option 3]\" ) >>> combo . currentText () 'Option 1' >>> combo . currentIndex () '0' >>> combo . setCurrentIndex ( 2 ) >>> combo . currentText () 'Option 3' >>> combo . clear () >>> combo . currentText () '' >>> combo . currentIndex () '-1'","title":"QComboBox"},{"location":"API_reference/#QtWidgets.QComboBox.addItem","text":"Adds an item to the combo box with the given text. Parameters: Name Type Description Default text str The text to display in the combo box. required","title":"addItem"},{"location":"API_reference/#QtWidgets.QComboBox.addItems","text":"Adds the items in the list texts to the combo box. Parameters: Name Type Description Default texts Sequence [ str ] The list of strings to add to the combo box. required","title":"addItems"},{"location":"API_reference/#QtWidgets.QComboBox.clear","text":"Clears the contents of the combo box, removing all items.","title":"clear"},{"location":"API_reference/#QtWidgets.QComboBox.currentIndex","text":"Gets the index of the currently selected item in the combo box. For an empty combo box, returns -1. The current index can change when inserting or removing items. Returns: Type Description int The index of the currently selected item.","title":"currentIndex"},{"location":"API_reference/#QtWidgets.QComboBox.currentText","text":"Gets the text of the currently selected item in the combo box. For an empty combo box, returns an empty string. Returns: Type Description str The text of the currently selected item.","title":"currentText"},{"location":"API_reference/#QtWidgets.QComboBox.removeItem","text":"Removes the item at the given index from the combo box. Parameters: Name Type Description Default index int The index of the item to remove. required","title":"removeItem"},{"location":"API_reference/#QtWidgets.QComboBox.setCurrentIndex","text":"Sets the current index of the combo box to the given index. Parameters: Name Type Description Default index int The index of the item to set as the current item. required","title":"setCurrentIndex"},{"location":"API_reference/#QtWidgets.QComboBox.setCurrentText","text":"Sets the current text of the combo box to the given text. Parameters: Name Type Description Default text str The text to set as the current text. required","title":"setCurrentText"},{"location":"API_reference/#QtWidgets.QDoubleSpinBox","text":"QDoubleSpinBox is designed to handle double values. For integers, use QSpinBox. QDoubleSpinBox allows the user to choose a value by clicking the up and down buttons to increment or decrement the value displayed. The value can also be changed by typing in a value. The range of valid values and the number of decimal places shown is configurable. Examples: >>> spin_box = QDoubleSpinBox () >>> spin_box . setMaximum ( 100 ) >>> spin_box . setMinimum ( 0 ) >>> spin_box . setSingleStep ( 0.1 ) >>> spin_box . setValue ( 50 ) >>> spin_box . value () 50.0 >>> spin_box . setValue ( 200 ) >>> spin_box . value () 100.0","title":"QDoubleSpinBox"},{"location":"API_reference/#QtWidgets.QDoubleSpinBox.setMaximum","text":"Sets the maximum value of the spin box. The default maximum value is 99.99. Parameters: Name Type Description Default max float The new maximum value. required","title":"setMaximum"},{"location":"API_reference/#QtWidgets.QDoubleSpinBox.setMinimum","text":"Sets the minimum value of the spin box. The default minimum value is 0.0. Parameters: Name Type Description Default min float The new minimum value. required","title":"setMinimum"},{"location":"API_reference/#QtWidgets.QDoubleSpinBox.setSingleStep","text":"Sets the value that the spin box will increment or decrement by when the up or down buttons are clicked. The default step value is 1.0. Setting a singleStep value of less than 0 does nothing. Parameters: Name Type Description Default val float The new step value. required","title":"setSingleStep"},{"location":"API_reference/#QtWidgets.QDoubleSpinBox.setValue","text":"Sets the value of the spin box. If the value is outside the range of the spin box, the value is adjusted to the nearest limit. Parameters: Name Type Description Default val float The new value. required","title":"setValue"},{"location":"API_reference/#QtWidgets.QDoubleSpinBox.value","text":"Returns the value of the spin box. Returns: Type Description float The value of the spin box.","title":"value"},{"location":"API_reference/#QtWidgets.QFormLayout","text":"summary Parameters: Name Type Description Default PySide6 _type_ description required","title":"QFormLayout"},{"location":"API_reference/#QtWidgets.QGroupBox","text":"summary Parameters: Name Type Description Default PySide6 _type_ description required","title":"QGroupBox"},{"location":"API_reference/#QtWidgets.QHBoxLayout","text":"summary Parameters: Name Type Description Default PySide6 _type_ description required","title":"QHBoxLayout"},{"location":"API_reference/#QtWidgets.QLabel","text":"QLabel is used for displaying text or an image. No user interaction functionality is provided. Examples: >>> label = QLabel () >>> label . setText ( \"Hello World!\" ) >>> label . text () 'Hello World!'","title":"QLabel"},{"location":"API_reference/#QtWidgets.QLabel.setText","text":"Sets the label's text to the given text. Parameters: Name Type Description Default text str The text to set. required","title":"setText"},{"location":"API_reference/#QtWidgets.QLabel.text","text":"Returns the label's text. Returns: Type Description str The label's text.","title":"text"},{"location":"API_reference/#QtWidgets.QMainWindow","text":"summary Parameters: Name Type Description Default PySide6 _type_ description required","title":"QMainWindow"},{"location":"API_reference/#QtWidgets.QPushButton","text":"The push button, or command button, is perhaps the most commonly used widget in any graphical user interface. Push (click) a button to command the computer to perform some action, or to answer a question. Typical buttons are OK, Apply, Cancel, Close, Yes, No and Help.","title":"QPushButton"},{"location":"API_reference/#QtWidgets.QPushButton.setText","text":"Sets the text to be displayed in the button. Parameters: Name Type Description Default text str The text to display in the button. required","title":"setText"},{"location":"API_reference/#QtWidgets.QSpinBox","text":"QSpinBox is designed to handle integers and discrete sets of values. Use QDoubleSpinBox for floating point values. QSpinBox allows the user to choose a value by clicking the up and down buttons to increment or decrement the value displayed. The value can also be changed by typing in a value. The range of valid values and the number of decimal places shown is configurable. Examples: >>> spin_box = QSpinBox () >>> spin_box . setMaximum ( 100 ) >>> spin_box . setMinimum ( 0 ) >>> spin_box . setSingleStep ( 5 ) >>> spin_box . setValue ( 50 ) >>> spin_box . value () 50 >>> spin_box . setValue ( 200 ) >>> spin_box . value () 100","title":"QSpinBox"},{"location":"API_reference/#QtWidgets.QSpinBox.setMaximum","text":"Sets the maximum value of the spin box. The default maximum value is 99. Parameters: Name Type Description Default max int The maximum value of the spin box. required","title":"setMaximum"},{"location":"API_reference/#QtWidgets.QSpinBox.setMinimum","text":"Sets the minimum value of the spin box. The default minimum value is 0. Parameters: Name Type Description Default min int The minimum value of the spin box. required","title":"setMinimum"},{"location":"API_reference/#QtWidgets.QSpinBox.setSingleStep","text":"Sets the value that the spin box will increment or decrement by when the up or down buttons are clicked. The default step value is 1. Setting a value less than 0 does nothing. Parameters: Name Type Description Default val int The value to increment or decrement by. required","title":"setSingleStep"},{"location":"API_reference/#QtWidgets.QSpinBox.setValue","text":"Sets the value of the spin box. If the value is outside the range of the spin box, the value is adjusted to the nearest limit. Parameters: Name Type Description Default val int The value to set the spin box to. required","title":"setValue"},{"location":"API_reference/#QtWidgets.QSpinBox.value","text":"Returns the current value of the spin box. Returns: Type Description int The current value of the spin box.","title":"value"},{"location":"API_reference/#QtWidgets.QTextEdit","text":"summary Parameters: Name Type Description Default PySide6 _type_ description required","title":"QTextEdit"},{"location":"API_reference/#QtWidgets.QVBoxLayout","text":"Create a vertical box to which widgets can be added. Layouts can be added to other layouts. Examples: >>> vbox = QVBoxLayout () >>> textedit = QTextEdit () >>> vbox . addWidget ( textedit ) >>> vbox = QVBoxLayout () >>> hbox = QHBoxLayout () >>> vbox . addLayout ( hbox )","title":"QVBoxLayout"},{"location":"API_reference/#QtWidgets.QVBoxLayout.addLayout","text":"Adds a layout to the vertical box layout Parameters: Name Type Description Default Layout QBoxLayout Layout required","title":"addLayout"},{"location":"API_reference/#QtWidgets.QVBoxLayout.addWidget","text":"Adds a widget to the vertical box layout Parameters: Name Type Description Default widget QWidget Widget required","title":"addWidget"},{"location":"User_Guide/","text":"","title":"User Guide"}]}